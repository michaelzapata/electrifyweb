{"version":3,"sources":["webpack:///src/app/pages/pages-menu.ts","webpack:///src/app/pages/pages-routing.module.ts","webpack:///src/app/pages/pages.component.ts","webpack:///src/app/pages/pages.module.ts","webpack:///src/app/pages/projects/artifacts/artifacts.component.ts","webpack:///src/app/pages/projects/artifacts/artifacts.component.html","webpack:///src/app/pages/projects/circuits/circuits.component.ts","webpack:///src/app/pages/projects/circuits/circuits.component.html","webpack:///src/app/pages/projects/models/circuittype.model.ts","webpack:///src/app/pages/projects/models/electrification-degree-type.model.ts","webpack:///src/app/pages/projects/models/surfacetype.model.ts","webpack:///src/app/pages/projects/projects-routing.module.ts","webpack:///src/app/pages/projects/projects.module.ts","webpack:///src/app/pages/projects/projects/projects.component.ts","webpack:///src/app/pages/projects/projects/projects.component.html","webpack:///src/app/pages/projects/services/artifacts.service.ts","webpack:///src/app/pages/projects/services/circuits.service.ts","webpack:///src/app/pages/projects/services/projects-calculator.service.ts","webpack:///src/app/pages/projects/services/projects.service.ts","webpack:///src/app/pages/projects/services/surfaces.service.ts","webpack:///src/app/pages/projects/surfaces/surfaces.component.ts","webpack:///src/app/pages/projects/surfaces/surfaces.component.html"],"names":["MENU_ITEMS","title","icon","link","home","routes","path","component","children","redirectTo","loadChildren","then","m","ProjectsModule","PagesRoutingModule","forChild","imports","exports","PagesComponent","menu","selector","styleUrls","template","PagesModule","declarations","ArtifactsComponent","artifactsService","fb","activatedRoute","artifactForm","group","name","required","powerConsumption","summerDay","summerNight","winterDay","winterNight","projectId","snapshot","params","environment","artifacts","getArtifacts","isEdit","invalid","newArtifact","value","saveArtifact","surfaceToUpdate","selectedArtifact","updateArtifacts","cleanForm","alert","controls","setValue","getArtifact","patchValue","deleteArtifact","hasError","templateUrl","CircuitsComponent","circuitsService","surfacesService","projectsCalculatorService","circuitForm","circuitType","numberOfMouths","length","parseInt","circuits","getCircuits","newCircuit","saveCircuit","circuitToUpdate","selectedCircuit","updateCircuit","getCircuit","deleteCircuit","maxNumberOfMouths","LAP","circuitLAPTotal","powerLoad","factorLoad","electrificationDegreeType","simultaneityCoefficient","surfaces","getSurfaces","totalSurface","apparentPower","electrificationDegree","Math","ceil","cosPhi","Volts","parseFloat","toFixed","circuit","current","calculateCurrent","nominalSection","nominalSectionByCurrentIntensity","nominalSections","sectionNominals","minimalNominalSection","find","ns","tryLAP","minSectionNominal","validateNominalSection","technicalFeatures","tecnicalFeatures","calcuteTensionDrop","tensionDrops","tensionDrop","td","maxTensionDrop","tensionDropCalculated","calculateTensionDrop","tendionDrop","isLAP","protectionCalculated","calculateProtection","isValidProtection","nominalSectionCalculated","technicalFeature","tf","abs","allowableCurrentIntensityInPipes","protection","Ib","Iz","In","I1","protectionValue","CircuitType","ElectrificationDegreeType","SurfaceType","ProjectsRoutingModule","ProjectsComponent","projectsService","projectForm","projects","getProjects","newProject","saveProject","projectToUpdate","selectedProject","updateProject","id","getProjectById","deleteProject","ArtifactsService","artifact","surface","getSurface","push","updateSurface","updatedArtifact","index","findIndex","filter","a","providedIn","CircuitsService","p","project","projectid","updatedCircuit","indexCircuit","s","ProjectsCalculatorService","reduce","sum","item","type","Covered","width","SemiCovered","totalSurfaceCovered","totalSurfaceSemiCovered","maximumConsumptionDetermined","calculateMaximumConsumptionDetermined","Minimal","IUG","TUG","Medium","High","TUE","Upper","IUE","artifactResult","calculateConsumptionOfEachMoment","summerDayConsumptionDetermined","summerNightConsumptionDetermined","winterDayConsumptionDetermined","winterNightConsumptionDetermined","accumulator","artifactAccumulator","circuitsWithoutLAP","c","subtotal","tecnicalFeature","tensionDropConfiguration","technicalFeaturesFiltered","feature","constant","workTension","pow","Ïƒ","protections","protectionType","ProtectionType","C05","C1","C2","C3","C4","C6","C10","C16","C20","C25","C32","C40","C50","C63","ProjectsService","key","localStorage","setItem","JSON","stringify","updatedProject","projectsFiltered","getItem","parse","undefined","SurfacesService","updatedSurface","indexSurface","SurfacesComponent","projectCalcultatorService","surfaceForm","newSurface","saveSurface","selectedSurface","deleteSurface","circuitsByelectrificationDegree"],"mappings":"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F;;AACF;;;;;;AALI;;AAAA;;AAGA;;AAAA;;;;;;AA9NpB;;AACE;;AAAgB;;AAAU;;AAC1B;;AACE;;AACE;;AACE;;AACE;;AAAgB;;AAAgB;;AAChC;;AACE;;AACE;;AACE;;AACE;;AAAwB;;AAAY;;AACpC;;AAAwB;;AAAW;;AACnC;;AAAwB;;AAAwB;;AAChD;;AAAwB;;AAAU;;AAClC;;AAAwB;;AAAW;;AACrC;;AACF;;AACA;;AACE;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;AAEF;;AACF;;AACA;;AACE;;AACE;;AACE;;AAAgB;;AAAwB;;AACxC;;AACE;;AACE;;AACE;;AACE;;AAAwB;;AAAsB;;AAC9C;;AAAwB;;AAAwB;;AAClD;;AACF;;AACA;;AACE;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;AAEF;;AACF;;AACA;;AACE;;AACE;;AACE;;AAAgB;;AAAkB;;AAClC;;AACE;;AACE;;AACE;;AACE;;AAAwB;;AAAe;;AACvC;;AAAwB;;AAAmC;;AAC7D;;AACF;;AACA;;AACE;;AAQF;;AACF;;AACF;;AA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;;AAC/C;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAmB;;AAAoB;;AACzC;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAmB;;AAAoC;;AACzD;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAmB;;AAAsB;;AAC3C;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AAAmB;;AAA2B;;AAChD;;AACA;;AACE;;AACF;;AACF;;AACF;;AAEA;;AACE;;AACE;;AACE;;AACE;;AAAgB;;AAA0B;;AAC1C;;AACE;;AACE;;AACE;;AACE;;AAAwB;;AAAyB;;AACjD;;AAAwB;;AAA2B;;AACnD;;AAAwB;;AAC2B;;AACrD;;AACF;;AACA;;AACE;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACA;;AACE;;AACE;;AACF;;AACA;;AACE;;AACF;;AACA;;AACE;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;AAGA;;AACE;;AACE;;AACE;;AACE;;AACA;;AAGF;;AACA;;AACE;;AAKF;;AACF;;AACF;;AACF;;AAEF;;AACF;;AACF;;AACF;;;;;;AAhJqF;;AAAA;;AAQK;;AAAA;;AAQI;;AAAA;;AAQjB;;AAAA;;AAQsB;;AAAA;;AAQd;;AAAA;;AAQF;;AAAA;;AAqB3D;;AAAA;;AAWA;;AAAA;;AAWA;;AAAA;;AAWA;;AAAA;;AAwBF;;AAAA;;AAK4B;;AAAA;;;;UDrMzC8E,iB;AAOX,mCACUlL,eADV,EAEUpC,EAFV,EAGUC,cAHV,EAIUsN,yBAJV,EAI8D;AAAA;;AAHpD,eAAAnL,eAAA,GAAAA,eAAA;AACA,eAAApC,EAAA,GAAAA,EAAA;AACA,eAAAC,cAAA,GAAAA,cAAA;AACA,eAAAsN,yBAAA,GAAAA,y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","file":"pages-pages-module-es5.js","sourcesContent":["import { NbMenuItem } from '@nebular/theme';\r\n\r\nexport const MENU_ITEMS: NbMenuItem[] = [\r\n  {\r\n    title: 'Projects',\r\n    icon: 'home-outline',\r\n    link: '/pages/projects',\r\n    home: true,\r\n  },\r\n];\r\n","import { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { PagesComponent } from './pages.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PagesComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'projects',\r\n\r\n      },\r\n      {\r\n        path: 'projects',\r\n        loadChildren: () => import('./projects/projects.module')\r\n          .then(m => m.ProjectsModule),\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PagesRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\nimport { MENU_ITEMS } from './pages-menu';\r\n\r\n@Component({\r\n  selector: 'ngx-pages',\r\n  styleUrls: ['pages.component.scss'],\r\n  template: `\r\n    <ngx-one-column-layout>\r\n      <nb-menu [items]=\"menu\"></nb-menu>\r\n      <router-outlet></router-outlet>\r\n    </ngx-one-column-layout>\r\n  `,\r\n})\r\nexport class PagesComponent {\r\n\r\n  menu = MENU_ITEMS;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NbMenuModule } from '@nebular/theme';\r\n\r\nimport { ThemeModule } from '../@theme/theme.module';\r\nimport { PagesComponent } from './pages.component';\r\nimport { PagesRoutingModule } from './pages-routing.module';\r\nimport { ProjectsModule } from './projects/projects.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    PagesRoutingModule,\r\n    ThemeModule,\r\n    NbMenuModule,\r\n    ProjectsModule,\r\n  ],\r\n  declarations: [\r\n    PagesComponent,\r\n  ],\r\n})\r\nexport class PagesModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Artifact } from '../models/artifact.model';\nimport { ArtifactsService } from 'app/pages/projects/services/artifacts.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'artifacts',\n  templateUrl: './artifacts.component.html',\n  styleUrls: ['./artifacts.component.scss'],\n})\nexport class ArtifactsComponent implements OnInit {\n  projectId: number;\n  environment: string;\n  artifactForm: FormGroup;\n  artifacts: Artifact[];\n  selectedArtifact: Artifact;\n  isEdit: boolean;\n\n  constructor(\n    private artifactsService: ArtifactsService,\n    private fb: FormBuilder,\n    private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.artifactForm = this.fb.group({\n      name: ['', Validators.required],\n      powerConsumption: ['', Validators.required],\n      summerDay: [false, Validators.required],\n      summerNight: [false, Validators.required],\n      winterDay: [false, Validators.required],\n      winterNight: [false, Validators.required],\n    });\n\n    this.projectId = this.activatedRoute.snapshot.params['projectId'];\n    this.environment = this.activatedRoute.snapshot.params['environment'];\n    this.artifacts = this.artifactsService.getArtifacts(\n      this.activatedRoute.snapshot.params['projectId'],\n      this.activatedRoute.snapshot.params['environment']);\n    this.isEdit = false;\n  }\n\n  saveArtifact() {\n    if(!this.artifactForm.invalid){\n      if(!this.isEdit){\n        let newArtifact = this.artifactForm.value as Artifact;\n        this.artifactsService.saveArtifact(this.projectId, this.environment, newArtifact);\n      } else {\n        let surfaceToUpdate = this.artifactForm.value as Artifact;\n        this.selectedArtifact.name = surfaceToUpdate.name;\n        this.selectedArtifact.powerConsumption = surfaceToUpdate.powerConsumption;\n        this.selectedArtifact.summerDay = surfaceToUpdate.summerDay;\n        this.selectedArtifact.summerNight = surfaceToUpdate.summerNight;\n        this.selectedArtifact.winterDay = surfaceToUpdate.winterDay;\n        this.selectedArtifact.winterNight = surfaceToUpdate.winterNight;\n        this.artifactsService.updateArtifacts(this.projectId, this.environment, this.selectedArtifact);\n      }\n      this.cleanForm();\n    } else {\n      alert('the form is invalid');\n    }\n  }\n\n  cleanForm(): void {\n    this.isEdit = false;\n    this.artifactForm.controls['name'].setValue('');\n    this.artifactForm.controls['powerConsumption'].setValue('');\n    this.artifactForm.controls['summerDay'].setValue(false);\n    this.artifactForm.controls['summerNight'].setValue(false);\n    this.artifactForm.controls['winterDay'].setValue(false);\n    this.artifactForm.controls['winterNight'].setValue(false);\n    this.artifacts = this.artifactsService.getArtifacts(this.projectId, this.environment);\n  }\n\n  editArtifact(environment: string, name: string) {\n    this.selectedArtifact = this.artifactsService.getArtifact(this.projectId, environment, name);\n    this.artifactForm.patchValue(this.selectedArtifact);\n    this.isEdit = true;\n  }\n\n  deleteArtifact(environment: string, name: string){\n    this.artifactsService.deleteArtifact(this.projectId, environment, name);\n    this.cleanForm();\n  }\n\n  isFormInvalid() : boolean {\n    return this.artifactForm.controls['name'].hasError('required')\n    || this.artifactForm.controls['powerConsumption'].hasError('required')\n    || this.artifactForm.controls['summerDay'].hasError('required')\n    || this.artifactForm.controls['summerNight'].hasError('required')\n    || this.artifactForm.controls['winterDay'].hasError('required')\n    || this.artifactForm.controls['winterNight'].hasError('required');\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\">\n      <nb-card-header>Artifact for environment: {{ environment }} <a nbButton outline status=\"info\" [routerLink]=\"'../../../surfaces/' + projectId\">Back to Surfaces</a></nb-card-header>\n      <nb-card-body>\n        <form [formGroup]=\"artifactForm\" class=\"form-inline\">\n          <input nbInput formControlName=\"name\" type=\"text\" placeholder=\"Name\" maxlength=\"100\" />\n          <input nbInput formControlName=\"powerConsumption\" type=\"number\" placeholder=\"Power Consumption [W]\" />\n          <nb-toggle formControlName=\"summerDay\" status=\"info\">Consume In Summer Day</nb-toggle>\n          <nb-toggle formControlName=\"summerNight\" status=\"info\">Consume In Summer Night</nb-toggle>\n          <nb-toggle formControlName=\"winterDay\" status=\"info\">Consume In Winter Day</nb-toggle>\n          <nb-toggle formControlName=\"winterNight\" status=\"info\">Consume In Winter Night</nb-toggle>\n          <button\n            outline\n            [disabled]=\"isFormInvalid()\"\n            nbButton\n            status=\"primary\"\n            (click)=\"saveArtifact()\">{{ !isEdit ? 'Save Artifact' : 'Update Artifact' }}</button>\n\n            <button *ngIf=\"isEdit\" outline nbButton status=\"danger\" (click)=\"cleanForm()\">Cancel</button>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"artifacts?.length > 0\">\n      <nb-card-header>Artifacts</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li *ngFor=\"let artifact of artifacts\" class=\"form-inline\">\n            <input nbInput disabled type=\"text\" placeholder=\"Name\" [value]=\"artifact.name\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Power Consumption [W]\" [value]=\"artifact.powerConsumption\" />\n            <nb-toggle disabled [checked]=\"artifact.summerDay\" status=\"info\">Consume In Summer Day</nb-toggle>\n            <nb-toggle disabled [checked]=\"artifact.summerNight\" status=\"info\">Consume In Summer Night</nb-toggle>\n            <nb-toggle disabled [checked]=\"artifact.winterDay\" status=\"info\">Consume In Winter Day</nb-toggle>\n            <nb-toggle disabled [checked]=\"artifact.winterNight\" status=\"info\">Consume In Winter Night</nb-toggle>\n            <button nbButton outline (click)=\"editArtifact(environment, artifact.name)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteArtifact(environment, artifact.name)\" status=\"danger\">Delete</button>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Circuit } from '../models/circuit.model';\nimport { CircuitsService } from '../services/circuits.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { CircuitType } from '../models/circuittype.model';\nimport { ElectrificationDegreeType } from '../models/electrification-degree-type.model';\nimport { ProjectsCalculatorService, Protection, ProtectionType, SectionNominal, TechnicalFeature, TensionDrop } from '../services/projects-calculator.service';\nimport { SurfacesService } from '../services/surfaces.service';\n\n@Component({\n  selector: 'circuits',\n  templateUrl: './circuits.component.html',\n  styleUrls: ['./circuits.component.scss'],\n})\nexport class CircuitsComponent implements OnInit {\n  projectId: number;\n  circuitForm: FormGroup;\n  circuits: Circuit[];\n  selectedCircuit: Circuit;\n  isEdit: boolean;\n\n  constructor(\n    private circuitsService: CircuitsService,\n    private surfacesService: SurfacesService,\n    private fb: FormBuilder,\n    private activatedRoute: ActivatedRoute,\n    private projectsCalculatorService: ProjectsCalculatorService) { }\n\n  ngOnInit(): void {\n    this.circuitForm = this.fb.group({\n      name: ['', Validators.required],\n      circuitType: ['', Validators.required],\n      numberOfMouths: ['', Validators.required],\n      length: ['', Validators.required],\n    });\n\n    this.projectId = parseInt(this.activatedRoute.snapshot.params['projectId']);\n    this.circuits = this.circuitsService.getCircuits(parseInt(this.activatedRoute.snapshot.params['projectId']));\n    this.isEdit = false;\n  }\n\n  saveCircuit() {\n    if(!this.circuitForm.invalid){\n      if(!this.isEdit){\n        let newCircuit = this.circuitForm.value as Circuit;\n        this.circuitsService.saveCircuit(this.projectId, newCircuit);\n      } else {\n        let circuitToUpdate = this.circuitForm.value as Circuit;\n        this.selectedCircuit.name = circuitToUpdate.name;\n        this.selectedCircuit.circuitType = circuitToUpdate.circuitType;\n        this.selectedCircuit.numberOfMouths = circuitToUpdate.numberOfMouths;\n        this.selectedCircuit.length = circuitToUpdate.length;\n        this.circuitsService.updateCircuit(this.projectId, this.selectedCircuit);\n      }\n      this.cleanForm();\n    } else {\n      alert('the form is invalid');\n    }\n  }\n\n  cleanForm(): void {\n    this.isEdit = false;\n    this.circuitForm.controls['name'].setValue('');\n    this.circuitForm.controls['circuitType'].setValue('');\n    this.circuitForm.controls['numberOfMouths'].setValue('');\n    this.circuitForm.controls['length'].setValue('');\n    this.circuits = this.circuitsService.getCircuits(this.projectId);\n  }\n\n  editCircuit(name: string) {\n    this.selectedCircuit = this.circuitsService.getCircuit(this.projectId, name);\n    this.circuitForm.patchValue(this.selectedCircuit);\n    this.isEdit = true;\n  }\n\n  deleteCircuit(name: string){\n    this.circuitsService.deleteCircuit(this.projectId, name);\n    this.cleanForm();\n  }\n\n  isFormInvalid() : boolean {\n    return this.circuitForm.controls['name'].hasError('required')\n    || this.circuitForm.controls['circuitType'].hasError('required')\n    || this.circuitForm.controls['numberOfMouths'].hasError('required')\n    || this.circuitForm.controls['length'].hasError('required');\n  }\n\n  circuitType(circuitType: CircuitType): CircuitType{\n    return circuitType;\n  }\n\n  maxNumberOfMouths(circuitType: CircuitType): number {\n    return this.projectsCalculatorService.maxNumberOfMouths(circuitType);\n  }\n\n  powerLoad(circuitType: CircuitType) : number {\n    if(circuitType == CircuitType.LAP){\n      return this.circuitLAPTotal();\n    }\n    return this.projectsCalculatorService.powerLoad(circuitType);\n  }\n\n  factorLoad(circuitType: CircuitType) : number {\n    return this.projectsCalculatorService.factorLoad(circuitType);\n  }\n\n  simultaneityCoefficient(electrificationDegreeType: ElectrificationDegreeType){\n    return this.projectsCalculatorService.simultaneityCoefficient(electrificationDegreeType);\n  }\n\n  electrificationDegree(electrificationDegreeType: ElectrificationDegreeType){\n    return electrificationDegreeType;\n  }\n\n  circuitLAPTotal() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    let totalSurface = this.projectsCalculatorService.totalSurface(surfaces);\n    let apparentPower = this.projectsCalculatorService.apparentPower(surfaces);\n    let electrificationDegree = this.projectsCalculatorService.electrificationDegree(totalSurface, apparentPower);\n    let simultaneityCoefficient = this.simultaneityCoefficient(electrificationDegree);\n    return Math.ceil(this.projectsCalculatorService.circuitLAPTotal(this.circuits, simultaneityCoefficient));\n  }\n\n  simultaneityCoefficientDetermined() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    let totalSurface = this.projectsCalculatorService.totalSurface(surfaces);\n    let apparentPower = this.projectsCalculatorService.apparentPower(surfaces);\n    let electrificationDegree = this.projectsCalculatorService.electrificationDegree(totalSurface, apparentPower);\n    return this.simultaneityCoefficient(electrificationDegree);\n  }\n\n  calculateCurrent(circuitType: CircuitType){\n    const cosPhi = 0.9;\n    const Volts = 220;\n    if(circuitType == CircuitType.LAP){\n      return parseFloat((this.circuitLAPTotal() / (Volts * cosPhi)).toFixed(2));\n    }\n    return parseFloat((this.powerLoad(circuitType) / (Volts * cosPhi)).toFixed(2));\n  }\n\n  nominalSection(circuit: Circuit) : number{\n    let current = this.calculateCurrent(circuit.circuitType);\n    let nominalSection = this.projectsCalculatorService.nominalSectionByCurrentIntensity(current);\n    let nominalSections = this.projectsCalculatorService.sectionNominals();\n    let minimalNominalSection = nominalSections.find(ns => ns.circuitType == circuit.circuitType);\n    let tryLAP = circuit.circuitType == CircuitType.LAP;\n\n    if(minimalNominalSection && nominalSection > minimalNominalSection.minSectionNominal) {\n      return this.projectsCalculatorService.validateNominalSection(\n        this.technicalFeatures(),\n        circuit,\n        nominalSection,\n        this.powerLoad(circuit.circuitType),\n        tryLAP);\n    }\n    return this.projectsCalculatorService.validateNominalSection(\n      this.technicalFeatures(),\n      circuit,\n      minimalNominalSection.minSectionNominal,\n      this.powerLoad(circuit.circuitType),\n      tryLAP);\n  }\n\n  technicalFeatures(): TechnicalFeature[] {\n    return this.projectsCalculatorService.tecnicalFeatures();\n  }\n\n  calculateTensionDrop(circuit: Circuit): number {\n    let nominalSection = this.nominalSection(circuit);\n    let powerLoad = this.powerLoad(circuit.circuitType);\n    return this.projectsCalculatorService.calcuteTensionDrop(circuit, nominalSection, powerLoad);\n  }\n\n  tensionDrops() : TensionDrop[]{\n    return this.projectsCalculatorService.tensionDrops();\n  }\n\n  tensionDrop(circuitType: CircuitType): number {\n    let tensionDrops = this.projectsCalculatorService.tensionDrops();\n    let tensionDrop = tensionDrops.find(td => td.circuitType == circuitType);\n    return tensionDrop?.maxTensionDrop || 0;\n  }\n\n  isValidTension(circuit: Circuit): boolean {\n    let tensionDropCalculated = this.calculateTensionDrop(circuit);\n    let tendionDrop = this.tensionDrop(circuit.circuitType);\n    return tensionDropCalculated <= tendionDrop;\n  }\n\n  sectionNominals() : SectionNominal[] {\n    return this.projectsCalculatorService.sectionNominals();\n  }\n\n  calculateProtection(circuit: Circuit) : Protection {\n    let current = this.calculateCurrent(circuit.circuitType);\n    let isLAP = circuit.circuitType == CircuitType.LAP;\n    let protectionCalculated = this.projectsCalculatorService.calculateProtection(current, isLAP);\n    if(!this.isValidProtection(circuit, protectionCalculated)){\n      let nominalSectionCalculated = this.nominalSection(circuit);\n      let technicalFeature = this.projectsCalculatorService\n        .tecnicalFeatures()\n        .find( tf => tf.nominalSection == nominalSectionCalculated);\n\n        if(Math.abs(technicalFeature.allowableCurrentIntensityInPipes - current) < 1){\n        return this.projectsCalculatorService\n          .calculateProtection(technicalFeature.allowableCurrentIntensityInPipes, isLAP);\n      }\n    }\n    return protectionCalculated;\n  }\n\n  isValidProtection(circuit: Circuit, protection: Protection) : boolean {\n    // 1.- Ib < I1\n    // 2.- In <= Iz\n    let nominalSectionCalculated = this.nominalSection(circuit);\n    let Ib = this.calculateCurrent(circuit.circuitType);\n    let Iz = this.projectsCalculatorService.tecnicalFeatures()\n      .find( tf => tf.nominalSection == nominalSectionCalculated).allowableCurrentIntensityInPipes;\n    let In = protection;\n    let I1 = parseFloat((1.13 * In.protectionValue).toFixed(2));\n    return Ib < I1 && In.protectionValue <= Iz;\n  }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\">\n      <nb-card-header>Circuit <a nbButton outline status=\"info\" [routerLink]=\"'../../../projects'\">Back to Proyects</a></nb-card-header>\n      <nb-card-body>\n        <form [formGroup]=\"circuitForm\" class=\"form-inline\">\n          <input nbInput formControlName=\"name\" type=\"text\" placeholder=\"Name\" maxlength=\"100\" />\n          <nb-select placeholder=\"Choose a circuit type\" formControlName=\"circuitType\">\n            <nb-option value=\"IUG\">IUG</nb-option>\n            <nb-option value=\"TUG\">TUG</nb-option>\n            <nb-option value=\"IUE\">IUE</nb-option>\n            <nb-option value=\"TUE\">TUE</nb-option>\n            <nb-option value=\"LAP\">LAP</nb-option>\n          </nb-select>\n          <input nbInput formControlName=\"numberOfMouths\" type=\"number\" placeholder=\"Number Of Mouths\" />\n          <input nbInput formControlName=\"length\" type=\"number\" placeholder=\"Length [m]\" />\n          <button\n            outline\n            [disabled]=\"isFormInvalid()\"\n            nbButton\n            status=\"primary\"\n            (click)=\"saveCircuit()\">{{ !isEdit ? 'Save Circuit' : 'Update Circuit' }}</button>\n\n            <button *ngIf=\"isEdit\" outline nbButton status=\"danger\" (click)=\"cleanForm()\">Cancel</button>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"circuits?.length > 0\">\n      <nb-card-header>Circuits</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li class=\"form-inline\">\n            <input class=\"input-inline-name\" nbInput disabled type=\"text\" value=\"Name\" />\n            <input class=\"input-inline-circuit-type\" nbInput disabled type=\"text\" value=\"Circuit Type\" />\n            <input class=\"input-inline-mouths\" nbInput disabled type=\"text\" placeholder=\"Number Of Mouths\" value=\"Number Of Mouths\" />\n            <input class=\"input-inline-length\" nbInput disabled type=\"text\" placeholder=\"Length\" value=\"Length [m]\" />\n            <input class=\"input-inline-power\" nbInput disabled type=\"text\" placeholder=\"Power [W]\" value=\"Power [W]\" />\n            <input class=\"input-inline-current\" nbInput disabled type=\"text\" placeholder=\"Current [A]\" value=\"Current [A]\" />\n            <input class=\"input-inline-section\" nbInput disabled type=\"text\" placeholder=\"Section [mm2]\" value=\"Section [mm2]\" />\n            <input class=\"input-inline-tension\" nbInput disabled type=\"text\" placeholder=\"[e%]\" value=\"[e%]\" />\n            <input class=\"input-inline-protection\" nbInput disabled type=\"text\" placeholder=\"Protection\" value=\"Protection\" />\n          </li>\n        </ul>\n        <ul>\n          <li *ngFor=\"let circuit of circuits\" class=\"form-inline\">\n            <input class=\"input-inline-name\" nbInput disabled type=\"text\" placeholder=\"Name\" [value]=\"circuit.name\" />\n            <input class=\"input-inline-circuit-type\" nbInput disabled type=\"text\" placeholder=\"Circuit Type\" [value]=\"circuit.circuitType\" />\n            <input\n              nbInput\n              class=\"input-inline-mouths\"\n              [status]=\"circuit.numberOfMouths <= maxNumberOfMouths(circuit.circuitType) ? 'success' : 'danger'\"\n              readonly\n              type=\"number\"\n              placeholder=\"Number Of Mouths\"\n              [value]=\"circuit.numberOfMouths\" />\n            <input class=\"input-inline-length\" nbInput disabled type=\"number\" placeholder=\"Length\" [value]=\"circuit.length\" />\n            <input class=\"input-inline-power\" nbInput disabled type=\"number\" placeholder=\"Power [W]\" [value]=\"powerLoad(circuit.circuitType)\" />\n            <input class=\"input-inline-current\" nbInput disabled type=\"text\" placeholder=\"Current [A]\" [value]=\"calculateCurrent(circuit.circuitType)\" />\n            <input class=\"input-inline-section\" nbInput disabled type=\"text\" placeholder=\"Section [mm2]\" [value]=\"nominalSection(circuit)\" />\n            <input\n              class=\"input-inline-tension\"\n              nbInput\n              readonly\n              [status]=\"isValidTension(circuit) ? 'success' : 'danger'\"\n              type=\"text\"\n              placeholder=\"[e%]\"\n              [value]=\"calculateTensionDrop(circuit)\" />\n              <input\n                class=\"input-inline-protection\"\n                nbInput\n                readonly\n                [status]=\"isValidProtection(circuit, calculateProtection(circuit)) ? 'success' : 'danger'\"\n                type=\"text\"\n                placeholder=\"Protection\"\n                [value]=\"calculateProtection(circuit)?.protectionType\" />\n            <button nbButton outline (click)=\"editCircuit(circuit.name)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteCircuit(circuit.name)\" status=\"danger\">Delete</button>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" *ngIf=\"circuits?.length > 0\">\n      <nb-card-header>References</nb-card-header>\n      <nb-card-body>\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"danger\">\n              <nb-card-header>Number of Mouths</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Circuit Type</th>\n                      <th style=\"width: 20%;\">Designation</th>\n                      <th style=\"width: 20%;\">Maximum Number of Mouths</th>\n                      <th style=\"width: 20%;\">Power Load</th>\n                      <th style=\"width: 20%;\">Factor Load</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>\n                        {{ circuitType('IUG') }}\n                      </td>\n                      <td>\n                        General purpose lighting\n                      </td>\n                      <td>\n                        {{ maxNumberOfMouths('IUG') }}\n                      </td>\n                      <td>\n                        {{ powerLoad('IUG') }}\n                      </td>\n                      <td>\n                        {{ factorLoad('IUG') }}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        {{ circuitType('TUG') }}\n                      </td>\n                      <td>\n                        General purpose sockets\n                      </td>\n                      <td>\n                        {{ maxNumberOfMouths('TUG') }}\n                      </td>\n                      <td>\n                        {{ powerLoad('TUG') }}\n                      </td>\n                      <td>\n                        {{ factorLoad('TUG') }}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        {{ circuitType('IUE') }}\n                      </td>\n                      <td>\n                        Special use lighting\n                      </td>\n                      <td>\n                        {{ maxNumberOfMouths('IUE') }}\n                      </td>\n                      <td>\n                        {{ powerLoad('IUE') }}\n                      </td>\n                      <td>\n                        {{ factorLoad('IUE') }}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        {{ circuitType('TUE') }}\n                      </td>\n                      <td>\n                        Special purpose sockets\n                      </td>\n                      <td>\n                        {{ maxNumberOfMouths('TUE') }}\n                      </td>\n                      <td>\n                        {{ powerLoad('TUE') }}\n                      </td>\n                      <td>\n                        {{ factorLoad('TUE') }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"success\">\n              <nb-card-header>Simultaneity Coefficient</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Electrification Degree</th>\n                      <th style=\"width: 20%;\">Simultaneity Coefficient</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr [style]=\"simultaneityCoefficientDetermined() == simultaneityCoefficient('Minimal') ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                      <td>\n                        {{ electrificationDegree('Minimal') }}\n                      </td>\n                      <td>\n                        {{ simultaneityCoefficient('Minimal') }}\n                      </td>\n                    </tr>\n                    <tr [style]=\"simultaneityCoefficientDetermined() == simultaneityCoefficient('Medium') ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                      <td>\n                        {{ electrificationDegree('Medium') }}\n                      </td>\n                      <td>\n                        {{ simultaneityCoefficient('Medium') }}\n                      </td>\n                    </tr>\n                    <tr [style]=\"simultaneityCoefficientDetermined() == simultaneityCoefficient('High') ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                      <td>\n                        {{ electrificationDegree('High') }}\n                      </td>\n                      <td>\n                        {{ simultaneityCoefficient('High') }}\n                      </td>\n                    </tr>\n                    <tr [style]=\"simultaneityCoefficientDetermined() == simultaneityCoefficient('Upper') ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                      <td>\n                        {{ electrificationDegree('Upper') }}\n                      </td>\n                      <td>\n                        {{ simultaneityCoefficient('Upper') }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"warning\">\n              <nb-card-header>Technical Features</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Nominal Section</th>\n                      <th style=\"width: 20%;\">Allowable CurrentIntensity In Pipes</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let technicalFeature of technicalFeatures()\">\n                      <td>\n                        {{ technicalFeature.nominalSection }}\n                      </td>\n                      <td>\n                        {{ technicalFeature.allowableCurrentIntensityInPipes }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"warning\">\n              <nb-card-header>Tension Drops</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Circuit Type</th>\n                      <th style=\"width: 20%;\">[e%]</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let tensionDrop of tensionDrops()\">\n                      <td>\n                        {{ tensionDrop.circuitType }}\n                      </td>\n                      <td>\n                        <= {{ tensionDrop.maxTensionDrop }} %\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"warning\">\n              <nb-card-header>Nominal Sections</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Circuit Type</th>\n                      <th style=\"width: 20%;\">Nominal Section</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let sectionNominal of sectionNominals()\">\n                      <td>\n                        {{ sectionNominal.circuitType }}\n                      </td>\n                      <td>\n                        >= {{ sectionNominal.minSectionNominal }} mm2\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n","export enum CircuitType {\r\n  IUG = 'IUG',\r\n  TUG = 'TUG',\r\n  IUE = 'IUE',\r\n  TUE = 'TUE',\r\n  LAP = 'LAP',\r\n}\r\n","export enum ElectrificationDegreeType {\r\n  Minimal = 'Minimal',\r\n  Medium = 'Medium',\r\n  High = 'High',\r\n  Upper = 'Upper',\r\n}\r\n","export enum SurfaceType {\r\n  'Covered',\r\n  'SemiCovered',\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ProjectsComponent } from './projects/projects.component';\nimport { SurfacesComponent } from './surfaces/surfaces.component';\nimport { ArtifactsComponent } from './artifacts/artifacts.component';\nimport { CircuitsComponent } from './circuits/circuits.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProjectsComponent,\n  },\n  {\n    path: 'surfaces/:projectId',\n    component: SurfacesComponent,\n  },\n  {\n    path: 'circuits/:projectId',\n    component: CircuitsComponent,\n  },\n  {\n    path: 'artifacts/:projectId/:environment',\n    component: ArtifactsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProjectsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProjectsRoutingModule } from './projects-routing.module';\nimport { ProjectsComponent } from './projects/projects.component';\nimport { NbButtonModule, NbCardModule, NbInputModule, NbSelectModule, NbStepperModule, NbToggleModule } from '@nebular/theme';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SurfacesComponent } from './surfaces/surfaces.component';\nimport { ArtifactsComponent } from './artifacts/artifacts.component';\nimport { CircuitsComponent } from './circuits/circuits.component';\n\n@NgModule({\n  declarations: [\n    ProjectsComponent,\n    SurfacesComponent,\n    ArtifactsComponent,\n    CircuitsComponent],\n  imports: [\n    CommonModule,\n    ProjectsRoutingModule,\n    NbCardModule,\n    NbStepperModule,\n    FormsModule,\n    NbButtonModule,\n    ReactiveFormsModule,\n    NbInputModule,\n    NbSelectModule,\n    NbToggleModule,\n  ],\n})\nexport class ProjectsModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Project } from '../models/project.model';\nimport { ProjectsService } from 'app/pages/projects/services/projects.service';\n\n@Component({\n  selector: 'projects',\n  templateUrl: './projects.component.html',\n  styleUrls: ['./projects.component.scss'],\n})\nexport class ProjectsComponent implements OnInit {\n\n  projectForm: FormGroup;\n  projects: Project[];\n  selectedProject: Project;\n  isEdit: boolean;\n\n  constructor(\n    private projectsService: ProjectsService,\n    private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.projectForm = this.fb.group({\n      name: ['', Validators.required],\n    });\n    this.projects = this.projectsService.getProjects();\n    this.isEdit = false;\n  }\n\n  saveProject() {\n    if(!this.projectForm.invalid){\n      if(!this.isEdit){\n        let newProject = this.projectForm.value as Project;\n        newProject.surfaces = [];\n        newProject.circuits = [];\n        this.projectsService.saveProject(newProject);\n      } else {\n        let projectToUpdate = this.projectForm.value as Project;\n        if(!this.selectedProject?.surfaces){\n          this.selectedProject.surfaces = [];\n        }\n        if(!this.selectedProject?.circuits){\n          this.selectedProject.circuits = [];\n        }\n        this.selectedProject.name = projectToUpdate.name;\n        this.projectsService.updateProject(this.selectedProject.id, this.selectedProject);\n      }\n      this.cleanForm();\n    } else {\n      alert('the form is invalid');\n    }\n  }\n  cleanForm(): void {\n    this.isEdit = false;\n    this.projectForm.controls['name'].setValue('');\n    this.projects = this.projectsService.getProjects();\n  }\n\n  editProject(id: number) {\n    this.selectedProject = this.projectsService.getProjectById(id);\n    this.projectForm.patchValue(this.selectedProject);\n    this.isEdit = true;\n  }\n\n  deleteProject(id: number){\n    this.projectsService.deleteProject(id);\n    this.cleanForm();\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\">\n      <nb-card-header>Project</nb-card-header>\n      <nb-card-body>\n        <form [formGroup]=\"projectForm\" class=\"form-inline\">\n          <input nbInput formControlName=\"name\" type=\"text\" placeholder=\"Project Name\" maxlength=\"100\" />\n          <button outline [disabled]=\"projectForm.controls['name'].hasError('required')\" nbButton status=\"primary\" (click)=\"saveProject()\">{{ !isEdit ? 'Save Project' : 'Update Project' }}</button>\n          <button *ngIf=\"isEdit\" outline nbButton status=\"danger\" (click)=\"cleanForm()\">Cancel</button>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"projects?.length > 0\">\n      <nb-card-header>Proyects</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li *ngFor=\"let project of projects\" class=\"form-inline\">\n            <input nbInput type=\"text\" disabled [value]=\"project.id\" />\n            <input nbInput type=\"text\" disabled maxlength=\"100\" [value]=\"project.name\" />\n            <button nbButton outline (click)=\"editProject(project.id)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteProject(project.id)\" status=\"danger\">Delete</button>\n            <a nbButton outline status=\"info\" [routerLink]=\"'./surfaces/' + project.id\">Surfaces</a>\n            <span *ngIf=\"project.surfaces?.length > 0\">\n              <a nbButton outline status=\"success\" [routerLink]=\"'./circuits/' + project.id\">Circuits</a>\n            </span>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { SurfacesService } from './surfaces.service';\nimport { Artifact } from '../models/artifact.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ArtifactsService {\n\n  constructor(\n    private surfacesService: SurfacesService,\n  ) { }\n\n  saveArtifact(projectId: number, environment: string, artifact: Artifact){\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    if(surface != null){\n\n      if(!surface.artifacts)\n        surface.artifacts = [];\n\n      surface.artifacts.push(artifact);\n      this.surfacesService.updateSurface(projectId, surface);\n    }\n  }\n\n  updateArtifacts(projectId: number, environment: string, updatedArtifact: Artifact){\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    if(surface){\n      const index = surface.artifacts\n        .findIndex((artifact) => artifact.name == updatedArtifact.name);\n      if(index != 1){\n        surface.artifacts[index] = updatedArtifact;\n        this.surfacesService.updateSurface(projectId, surface);\n      }\n    }\n  }\n\n  deleteArtifact(projectId: number, environment: string, name: string) {\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    if(surface){\n      surface.artifacts = surface.artifacts.filter(a => a.name != name);\n      this.surfacesService.updateSurface(projectId, surface);\n    }\n  }\n\n  getArtifact(projectId: number, environment: string, name: string): Artifact | null {\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    return surface?.artifacts ? surface?.artifacts.find((artifact) => artifact.name == name) : null;\n  }\n\n  getArtifacts(projectId: number, environment: string): Artifact[] {\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    return surface?.artifacts || [];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProjectsService } from './projects.service';\nimport { Circuit } from '../models/circuit.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CircuitsService {\n\n  constructor(private projectsService: ProjectsService) { }\n\n  saveCircuit(projectId: number, circuit: Circuit) {\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectId);\n    if(index != -1){\n      let project = projects[index];\n\n      if(!project.circuits)\n        project.circuits = [];\n\n      project.circuits.push(circuit);\n      this.projectsService.updateProject(projectId, project);\n    }\n  }\n\n  updateCircuit(projectid: number, updatedCircuit: Circuit){\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectid);\n    if(index != -1){\n      let circuits = projects[index]?.circuits;\n      if(circuits){\n        let indexCircuit = circuits.findIndex(s => s.name == updatedCircuit.name);\n        if(indexCircuit != -1){\n          circuits[indexCircuit] = updatedCircuit;\n          projects[index].circuits = circuits;\n          this.projectsService.updateProject(projectid, projects[index]);\n        }\n      }\n    }\n  }\n\n  deleteCircuit(projectId: number, name: string) {\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectId);\n    if(index != -1){\n      let project = projects[index];\n      project.circuits = project.circuits.filter(s => s.name != name);\n      this.projectsService.updateProject(projectId, project);\n    }\n  }\n\n  getCircuit(projectId: number, name: string): Circuit | null {\n    const project = this.projectsService.getProjectById(projectId);\n    return project?.circuits ? project?.circuits.find((circuit) => circuit.name == name) : null;\n  }\n\n  getCircuits(projectId: number): Circuit[] {\n    const project = this.projectsService.getProjectById(projectId);\n    return project?.circuits || [];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Surface } from '../models/surface.model';\nimport { Artifact } from '../models/artifact.model';\nimport { SurfaceType } from '../models/surfacetype.model';\nimport { ElectrificationDegreeType } from '../models/electrification-degree-type.model';\nimport { CircuitType } from '../models/circuittype.model';\nimport { Circuit } from '../models/circuit.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectsCalculatorService {\n\n  constructor() { }\n\n  totalSurfaceCovered(surfaces: Surface[]) : number{\n    return surfaces.reduce(\n      (sum, item) => item.type == SurfaceType.Covered ?\n        sum + parseFloat((item.width * item.length).toFixed(2)) : sum + 0, 0);\n  }\n\n  totalSurfaceSemiCovered(surfaces: Surface[]) : number {\n    return surfaces.reduce(\n      (sum, item) => item.type == SurfaceType.SemiCovered ?\n        sum + parseFloat((item.width * item.length).toFixed(2)) : sum + 0, 0);\n  }\n\n  totalSurface(surfaces: Surface[]) : number {\n    return this.totalSurfaceCovered(surfaces) + ( this.totalSurfaceSemiCovered(surfaces) / 2 );\n  }\n\n  apparentPower(surfaces: Surface[]): number {\n    let maximumConsumptionDetermined = this.calculateMaximumConsumptionDetermined(surfaces);\n    return parseFloat(((maximumConsumptionDetermined / 0.9) / 1000 ).toFixed(2));\n  }\n\n  circuitsByelectrificationDegree(electrificationDegreeType: ElectrificationDegreeType) : CircuitType[] {\n    let circuits = [];\n    switch(electrificationDegreeType){\n      case ElectrificationDegreeType.Minimal:\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.TUG);\n        break;\n      case ElectrificationDegreeType.Medium:\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.TUG);\n        break;\n      case ElectrificationDegreeType.High:\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.TUG);\n        circuits.push(CircuitType.TUG);\n        circuits.push(CircuitType.TUE);\n        break;\n      default:\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.TUG);\n        circuits.push(CircuitType.TUG);\n        circuits.push(CircuitType.TUE);\n        break;\n    }\n    return circuits;\n  }\n\n  electrificationDegree(surface: number, apparentPower: number): ElectrificationDegreeType {\n    if (surface <= 60 && apparentPower <= 3.7) {\n      return ElectrificationDegreeType.Minimal;\n    } else if (surface <= 130 && apparentPower <= 7) {\n      return ElectrificationDegreeType.Medium;\n    } else if (surface <= 200 && apparentPower <= 11) {\n      return ElectrificationDegreeType.High;\n    } else {\n      return ElectrificationDegreeType.Upper;\n    }\n  }\n\n  simultaneityCoefficient(electrificationDegreeType: ElectrificationDegreeType) : number {\n    switch(electrificationDegreeType){\n      case ElectrificationDegreeType.Minimal:\n        return 1;\n      case ElectrificationDegreeType.Medium:\n        return 0.9;\n      case ElectrificationDegreeType.High:\n        return 0.8;\n      case ElectrificationDegreeType.Upper:\n        return 0.7;\n      default:\n        return 0;\n    }\n  }\n\n  maxNumberOfMouths(circuitType: CircuitType) {\n    switch(circuitType){\n      case CircuitType.IUG:\n      case CircuitType.TUG:\n        return 15;\n      case CircuitType.IUE:\n      case CircuitType.TUE:\n        return 12;\n      default:\n        return 0;\n    }\n  }\n\n  powerLoad(circuitType: CircuitType): number {\n    switch (circuitType) {\n      case CircuitType.IUG:\n        return 810;\n      case CircuitType.TUG:\n        return 1980;\n      case CircuitType.IUE:\n      case CircuitType.TUE:\n        return 2970;\n      default:\n        return 0;\n    }\n  }\n\n  factorLoad(circuitType: CircuitType): number {\n    switch (circuitType) {\n      case CircuitType.IUG:\n        return 0.66;\n      case CircuitType.TUG:\n      case CircuitType.IUE:\n      case CircuitType.TUE:\n        return 1;\n      default:\n        return 0;\n    }\n  }\n\n  calculateMaximumConsumptionDetermined(surfaces: Surface[]) : number {\n    let maximumConsumptionDetermined = 0;\n    let artifactResult = this.calculateConsumptionOfEachMoment(surfaces);\n    if(artifactResult.summerDayConsumptionDetermined >= maximumConsumptionDetermined){\n      maximumConsumptionDetermined = artifactResult.summerDayConsumptionDetermined;\n    }\n\n    if(artifactResult.summerNightConsumptionDetermined >= maximumConsumptionDetermined){\n      maximumConsumptionDetermined = artifactResult.summerNightConsumptionDetermined;\n    }\n\n    if(artifactResult.winterDayConsumptionDetermined >= maximumConsumptionDetermined){\n      maximumConsumptionDetermined = artifactResult.winterDayConsumptionDetermined;\n    }\n\n    if(artifactResult.winterNightConsumptionDetermined >= maximumConsumptionDetermined){\n      maximumConsumptionDetermined = artifactResult.winterNightConsumptionDetermined;\n    }\n    return maximumConsumptionDetermined;\n  }\n\n  private calculateConsumptionOfEachMoment(surfaces: Surface[]) : ArtifactResult {\n    return surfaces.reduce((accumulator: ArtifactResult, surface: Surface) => {\n      return surface.artifacts.reduce((artifactAccumulator: ArtifactResult, artifact: Artifact) => {\n        if (artifact.summerDay) {\n          artifactAccumulator.summerDayConsumptionDetermined += artifact.powerConsumption;\n        }\n        if (artifact.summerNight) {\n          artifactAccumulator.summerNightConsumptionDetermined += artifact.powerConsumption;\n        }\n        if (artifact.winterDay) {\n          artifactAccumulator.winterDayConsumptionDetermined += artifact.powerConsumption;\n        }\n        if (artifact.winterNight) {\n          artifactAccumulator.winterNightConsumptionDetermined += artifact.powerConsumption;\n        }\n        return artifactAccumulator;\n      }, accumulator);\n    }, {\n      summerDayConsumptionDetermined: 0,\n      summerNightConsumptionDetermined: 0,\n      winterDayConsumptionDetermined: 0,\n      winterNightConsumptionDetermined: 0,\n    });\n  }\n\n  circuitLAPTotal(circuits: Circuit[] = [], simultaneityCoefficient: number) : number {\n\n      let circuitsWithoutLAP = circuits.filter(c => c.circuitType != CircuitType.LAP);\n      let subtotal = circuitsWithoutLAP.reduce(\n        (sum, circuit) =>\n          sum + parseFloat((this.powerLoad(circuit.circuitType) * this.factorLoad(circuit.circuitType)).toFixed(2)), 0);\n\n      return parseFloat((subtotal * simultaneityCoefficient).toFixed(2));\n  }\n\n  circuitSubtotal(circuitType: CircuitType) : number {\n    return parseFloat((this.powerLoad(circuitType) * this.factorLoad(circuitType)).toFixed(2));\n  }\n\n  nominalSectionByCurrentIntensity(current: number) : number {\n    let tecnicalFeatures = this.tecnicalFeatures();\n    let tecnicalFeature = tecnicalFeatures.find(tf => current <= tf.allowableCurrentIntensityInPipes);\n    return tecnicalFeature.nominalSection;\n  }\n\n  tecnicalFeatures(): TechnicalFeature[] {\n    return [\n      { nominalSection: 0.75, allowableCurrentIntensityInPipes: 8.0 },\n      { nominalSection: 1.0, allowableCurrentIntensityInPipes: 10.5 },\n      { nominalSection: 1.5, allowableCurrentIntensityInPipes: 13.0 },\n      { nominalSection: 2.5, allowableCurrentIntensityInPipes: 18.0 },\n      { nominalSection: 4.0, allowableCurrentIntensityInPipes: 25.0 },\n      { nominalSection: 6.0, allowableCurrentIntensityInPipes: 32.0 },\n      { nominalSection: 10.0, allowableCurrentIntensityInPipes: 44.0 },\n      { nominalSection: 16.0, allowableCurrentIntensityInPipes: 59.0 },\n      { nominalSection: 25.0, allowableCurrentIntensityInPipes: 77.0 },\n      { nominalSection: 35.0, allowableCurrentIntensityInPipes: 96.0 },\n      { nominalSection: 50.0, allowableCurrentIntensityInPipes: 117.0 },\n      { nominalSection: 70.0, allowableCurrentIntensityInPipes: 149.0 },\n      { nominalSection: 95.0, allowableCurrentIntensityInPipes: 180.0 },\n      { nominalSection: 120.0, allowableCurrentIntensityInPipes: 208.0 },\n    ] as TechnicalFeature[];\n  }\n\n  tensionDrops(): TensionDrop[]{\n    return [\n      { circuitType: CircuitType.LAP, maxTensionDrop: 1 },\n      { circuitType: CircuitType.IUG, maxTensionDrop: 2 },\n      { circuitType: CircuitType.TUG, maxTensionDrop: 2 },\n      { circuitType: CircuitType.IUE, maxTensionDrop: 2 },\n      { circuitType: CircuitType.TUE, maxTensionDrop: 2 },\n\n    ] as TensionDrop[];\n  }\n\n  validateNominalSection(\n    technicalFeatures: TechnicalFeature[],\n    circuit: Circuit,\n    nominalSection: number,\n    powerLoad: number,\n    tryLAP: boolean) : number {\n\n    let nominalSectionCalculated = nominalSection;\n    // if LAP try with the immediately preceding nominal section\n    if(tryLAP && circuit.circuitType == CircuitType.LAP){\n      const index = technicalFeatures.findIndex(item => item.nominalSection == nominalSectionCalculated);\n\n      if (index > 0) {\n        return this.validateNominalSection(\n          technicalFeatures,\n          circuit,\n          technicalFeatures[index - 1].nominalSection,\n          powerLoad,\n          false); // No hay secciÃ³n anterior\n      }\n\n    }\n\n    let tensionDropCalculated = this.calcuteTensionDrop(circuit, nominalSection, powerLoad);\n    let tensionDropConfiguration = this.tensionDrops().find(td => td.circuitType == circuit.circuitType);\n\n    if (tensionDropCalculated >= tensionDropConfiguration.maxTensionDrop) {\n      let technicalFeaturesFiltered = technicalFeatures.filter(feature => feature.nominalSection > nominalSection);\n      let technicalFeature = technicalFeaturesFiltered[0];\n      return this.validateNominalSection(technicalFeaturesFiltered, circuit, technicalFeature.nominalSection, powerLoad, false);\n    }\n    return nominalSection;\n  }\n\n  calcuteTensionDrop(circuit: Circuit, nominalSection: number, powerLoad: number) : number {\n    let constant = 200;\n    let length = circuit.length;\n    let workTension = Math.pow(220, 2);\n    let Ïƒ = 47.5;\n    return parseFloat(((constant * powerLoad * length) / (workTension * Ïƒ * nominalSection)).toFixed(2));\n  }\n\n  sectionNominals(): SectionNominal[]{\n    return [\n      { circuitType: CircuitType.LAP, minSectionNominal: 4.0 },\n      { circuitType: CircuitType.IUG, minSectionNominal: 1.5 },\n      { circuitType: CircuitType.TUG, minSectionNominal: 2.5 },\n      { circuitType: CircuitType.IUE, minSectionNominal: 2.5 },\n      { circuitType: CircuitType.TUE, minSectionNominal: 2.5 },\n\n    ] as SectionNominal[];\n  }\n\n  calculateProtection(current: number, isLAP: boolean = false) : Protection {\n    // 1.- ib < i1\n    // 2.- in <= iz\n    let Ib = current;\n    let In = isLAP ? this.protections().find(p => Ib <= p.protectionValue) : this.protections().find(p => Ib < p.protectionValue);\n    return In;\n  }\n\n  validateProtection(nominalSectionCalculated: number, current: number) : Protection {\n    // 1.- ib < i1\n    // 2.- in <= iz\n    let Ib = current;\n    let Iz = this.tecnicalFeatures().find( tf => tf.nominalSection == nominalSectionCalculated).allowableCurrentIntensityInPipes;\n    let In = this.protections().find(p => p.protectionValue <= Ib);\n    let I1 = 1.13 * In.protectionValue;\n    return In;\n  }\n\n  protections(): Protection[] {\n    return [\n      { protectionType: ProtectionType.C05, protectionValue: 0.5 },\n      { protectionType: ProtectionType.C1, protectionValue: 1 },\n      { protectionType: ProtectionType.C2, protectionValue: 2 },\n      { protectionType: ProtectionType.C3, protectionValue: 3 },\n      { protectionType: ProtectionType.C4, protectionValue: 4 },\n      { protectionType: ProtectionType.C6, protectionValue: 6 },\n      { protectionType: ProtectionType.C10, protectionValue: 10 },\n      { protectionType: ProtectionType.C16, protectionValue: 16 },\n      { protectionType: ProtectionType.C20, protectionValue: 20 },\n      { protectionType: ProtectionType.C25, protectionValue: 25 },\n      { protectionType: ProtectionType.C32, protectionValue: 32 },\n      { protectionType: ProtectionType.C40, protectionValue: 40 },\n      { protectionType: ProtectionType.C50, protectionValue: 50 },\n      { protectionType: ProtectionType.C63, protectionValue: 63 },\n    ];\n  }\n}\n\ninterface ArtifactResult {\n  summerDayConsumptionDetermined: number;\n  summerNightConsumptionDetermined: number;\n  winterDayConsumptionDetermined: number;\n  winterNightConsumptionDetermined: number;\n}\n\nexport interface TechnicalFeature {\n  nominalSection: number;\n  allowableCurrentIntensityInPipes: number;\n}\n\nexport interface TensionDrop {\n  circuitType: CircuitType;\n  maxTensionDrop: number;\n}\n\nexport interface SectionNominal {\n  circuitType: CircuitType;\n  minSectionNominal: number;\n}\n\nexport interface Protection {\n  protectionType: ProtectionType;\n  protectionValue: number;\n}\n\nexport enum ProtectionType {\n  C05 = 'C05',\n  C1 = 'C1',\n  C2 = 'C2',\n  C3 = 'C3',\n  C4 = 'C4',\n  C6 = 'C6',\n  C10 = 'C10',\n  C16 = 'C16',\n  C20 = 'C20',\n  C25 = 'C25',\n  C32 = 'C32',\n  C40 = 'C40',\n  C50 = 'C50',\n  C63 = 'C63',\n}\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { Project } from '../models/project.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectsService {\n  private key = 'projects';\n\n  saveProject(project: Project) {\n    let projects = this.getProjects();\n    project.id = projects.length + 1;\n    projects = projects.filter(p => p.id != project.id);\n    projects.push(project);\n    localStorage.setItem(this.key, JSON.stringify(projects));\n  }\n\n  updateProject(id: number, updatedProject: Project) {\n    let projects = this.getProjects();\n    const index = projects.findIndex((project) => project.id == id);\n    if (index > -1) {\n      projects[index] = updatedProject;\n      localStorage.setItem(this.key, JSON.stringify(projects));\n    }\n  }\n\n  deleteProject(id: number) {\n    let projects = this.getProjects();\n    const projectsFiltered = projects.filter((project) => project.id != id);\n    if(projectsFiltered){\n      localStorage.setItem(this.key, JSON.stringify(projectsFiltered));\n    }\n  }\n\n  getProject(): Project | null {\n    const projects = this.getProjects();\n    return projects.length > 0 ? projects[0] : null; // Return the first project for simplicity\n  }\n\n  getProjects(): Project[] {\n    const projects = localStorage.getItem(this.key);\n    return projects ? JSON.parse(projects) : [];\n  }\n\n  getProjectById(id: number): Project | undefined {\n    const projects = localStorage.getItem(this.key);\n    return projects ? JSON.parse(projects)?.find((project) => project.id == id) : undefined;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ProjectsService } from './projects.service';\nimport { Surface } from '../models/surface.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SurfacesService {\n\n  constructor(\n    private projectsService: ProjectsService,\n  ) { }\n\n  saveSurface(projectId: number, surface: Surface) {\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectId);\n    if(index != -1){\n      let project = projects[index];\n\n      if(!project.surfaces)\n        project.surfaces = [];\n\n      project.surfaces.push(surface);\n      this.projectsService.updateProject(projectId, project);\n    }\n  }\n\n  updateSurface(projectid: number, updatedSurface: Surface){\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectid);\n    if(index != -1){\n      let surfaces = projects[index]?.surfaces;\n      if(surfaces){\n        let indexSurface = surfaces.findIndex(s => s.environment == updatedSurface.environment);\n        if(indexSurface != -1){\n          surfaces[indexSurface] = updatedSurface;\n          projects[index].surfaces = surfaces;\n          this.projectsService.updateProject(projectid, projects[index]);\n        }\n      }\n    }\n  }\n\n  deleteSurface(projectId: number, environment: string) {\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectId);\n    if(index != -1){\n      let project = projects[index];\n      project.surfaces = project.surfaces.filter(s => s.environment != environment);\n      this.projectsService.updateProject(projectId, project);\n    }\n  }\n\n  getSurface(projectId: number, environment: string): Surface | null {\n    const project = this.projectsService.getProjectById(projectId);\n    return project?.surfaces ? project?.surfaces.find((surface) => surface.environment == environment) : null;\n  }\n\n  getSurfaces(projectId: number): Surface[] {\n    const project = this.projectsService.getProjectById(projectId);\n    return project?.surfaces || [];\n  }\n\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Surface } from '../models/surface.model';\nimport { SurfacesService } from 'app/pages/projects/services/surfaces.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { SurfaceType } from '../models/surfacetype.model';\nimport { ProjectsCalculatorService } from '../services/projects-calculator.service';\nimport { ElectrificationDegreeType } from '../models/electrification-degree-type.model';\nimport { CircuitType } from '../models/circuittype.model';\n\n@Component({\n  selector: 'surfaces',\n  templateUrl: './surfaces.component.html',\n  styleUrls: ['./surfaces.component.scss'],\n})\nexport class SurfacesComponent implements OnInit {\n  projectId: number;\n  surfaceForm: FormGroup;\n  surfaces: Surface[];\n  selectedSurface: Surface;\n  isEdit: boolean;\n\n  constructor(\n    private surfacesService: SurfacesService,\n    private fb: FormBuilder,\n    private activatedRoute: ActivatedRoute,\n    private projectCalcultatorService: ProjectsCalculatorService,\n  ) { }\n\n  ngOnInit(): void {\n    this.surfaceForm = this.fb.group({\n      type: ['', Validators.required],\n      environment: ['', Validators.required],\n      width: ['', Validators.required],\n      length: ['', Validators.required],\n    });\n\n    this.projectId = parseInt(this.activatedRoute.snapshot.params['projectId']);\n    this.surfaces = this.surfacesService.getSurfaces(parseInt(this.activatedRoute.snapshot.params['projectId']));\n    this.isEdit = false;\n  }\n\n  saveSurface() {\n    if(!this.surfaceForm.invalid){\n      if(!this.isEdit){\n        let newSurface = this.surfaceForm.value as Surface;\n        newSurface.artifacts = [];\n        this.surfacesService.saveSurface(this.projectId, newSurface);\n      } else {\n        let surfaceToUpdate = this.surfaceForm.value as Surface;\n        this.selectedSurface.type = surfaceToUpdate.type;\n        this.selectedSurface.environment = surfaceToUpdate.environment;\n        this.selectedSurface.width = surfaceToUpdate.width;\n        this.selectedSurface.length = surfaceToUpdate.length;\n        this.surfacesService.updateSurface(this.projectId, this.selectedSurface);\n      }\n      this.cleanForm();\n    } else {\n      alert('the form is invalid');\n    }\n  }\n\n  cleanForm(): void {\n    this.isEdit = false;\n    this.surfaceForm.controls['type'].setValue('');\n    this.surfaceForm.controls['environment'].setValue('');\n    this.surfaceForm.controls['width'].setValue('');\n    this.surfaceForm.controls['length'].setValue('');\n    this.surfaces = this.surfacesService.getSurfaces(this.projectId);\n  }\n\n  editSurface(environment: string) {\n    this.selectedSurface = this.surfacesService.getSurface(this.projectId, environment);\n    this.surfaceForm.patchValue(this.selectedSurface);\n    this.isEdit = true;\n  }\n\n  deleteSurface(environment: string){\n    this.surfacesService.deleteSurface(this.projectId, environment);\n    this.cleanForm();\n  }\n\n  isFormInvalid() : boolean {\n    return this.surfaceForm.controls['type'].hasError('required')\n    || this.surfaceForm.controls['environment'].hasError('required')\n    || this.surfaceForm.controls['width'].hasError('required')\n    || this.surfaceForm.controls['length'].hasError('required');\n  }\n\n  coveredSurfaces() : Surface[]{\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return surfaces.filter(surface => surface.type == SurfaceType.Covered);\n  }\n\n  semiCoveredSurfaces() : Surface[]{\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return surfaces.filter(surface => surface.type == SurfaceType.SemiCovered);\n  }\n\n  totalSurfaceCovered() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.totalSurfaceCovered(surfaces);\n  }\n\n  totalSurfaceSemiCovered() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.totalSurfaceSemiCovered(surfaces);\n  }\n\n  totalSurface() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.totalSurface(surfaces);\n  }\n\n  calculateMaximumConsumptionDetermined(): number{\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.calculateMaximumConsumptionDetermined(surfaces);\n  }\n\n  apparentPower() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.apparentPower(surfaces);\n  }\n\n  electrificationDegree() : ElectrificationDegreeType {\n    return this.projectCalcultatorService.electrificationDegree(this.totalSurface(), this.apparentPower());\n  }\n\n  isMinimalElectrificationDegree() : boolean {\n    return this.electrificationDegree() == ElectrificationDegreeType.Minimal;\n  }\n\n  isMediumElectrificationDegree() : boolean {\n    return this.electrificationDegree() == ElectrificationDegreeType.Medium;\n  }\n\n  isHighElectrificationDegree() : boolean {\n    return this.electrificationDegree() == ElectrificationDegreeType.High;\n  }\n\n  isUpperElectrificationDegree() : boolean {\n    return this.electrificationDegree() == ElectrificationDegreeType.Upper;\n  }\n\n  circuits() : CircuitType[]{\n    let electrificationDegree = this.electrificationDegree();\n    return this.projectCalcultatorService.circuitsByelectrificationDegree(electrificationDegree);\n  }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\">\n      <nb-card-header>Surface <a nbButton outline status=\"info\" [routerLink]=\"'../../../projects'\">Back to Proyects</a></nb-card-header>\n      <nb-card-body>\n        <form [formGroup]=\"surfaceForm\" class=\"form-inline\">\n          <nb-select placeholder=\"Choose a surface type\" formControlName=\"type\">\n            <nb-option value=\"0\">Covered</nb-option>\n            <nb-option value=\"1\">Semi-Covered</nb-option>\n          </nb-select>\n          <input nbInput formControlName=\"environment\" type=\"text\" placeholder=\"Environment\" maxlength=\"100\" />\n          <input nbInput formControlName=\"width\" type=\"number\" placeholder=\"Width [m]\" />\n          <input nbInput formControlName=\"length\" type=\"number\" placeholder=\"Length [m]\" />\n          <button\n            outline\n            [disabled]=\"isFormInvalid()\"\n            nbButton\n            status=\"primary\"\n            (click)=\"saveSurface()\">{{ !isEdit ? 'Save Surface' : 'Update Surface' }}</button>\n\n            <button *ngIf=\"isEdit\" outline nbButton status=\"danger\" (click)=\"cleanForm()\">Cancel</button>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"coveredSurfaces()?.length > 0\">\n      <nb-card-header>Surfaces Covered</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li *ngFor=\"let surface of coveredSurfaces()\" class=\"form-inline\">\n            <input nbInput disabled type=\"text\" placeholder=\"Environment\" [value]=\"surface.environment\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Width [m]\" [value]=\"surface.width\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Length [m]\" [value]=\"surface.length\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Surface [m2]\" [value]=\"(surface.width * surface.length).toFixed(2)\" />\n            <button nbButton outline (click)=\"editSurface(surface.environment)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteSurface(surface.environment)\" status=\"danger\">Delete</button>\n            <a nbButton outline status=\"info\" [routerLink]=\"'../../artifacts/' + projectId + '/' + surface.environment\">Artifacts</a>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"semiCoveredSurfaces()?.length > 0\">\n      <nb-card-header>Surfaces Semi Covered</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li *ngFor=\"let surface of semiCoveredSurfaces()\" class=\"form-inline\">\n            <input nbInput disabled type=\"text\" placeholder=\"Environment\" [value]=\"surface.environment\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Width\" [value]=\"surface.width\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Length\" [value]=\"surface.length\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Surface [m2]\" [value]=\"(surface.width * surface.length).toFixed(2)\" />\n            <button nbButton outline (click)=\"editSurface(surface.environment)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteSurface(surface.environment)\" status=\"danger\">Delete</button>\n            <a nbButton outline status=\"info\" [routerLink]=\"'../../artifacts/' + projectId + '/' + surface.environment\">Artifacts</a>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" *ngIf=\"surfaces?.length > 0\">\n      <nb-card-header>Totals</nb-card-header>\n      <nb-card-body>\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-5\">\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span>Covered Surface: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Surface Covered [m2]\" [value]=\"totalSurfaceCovered()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Semi Covered Surface: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Surface Semi Covered [m2]\" [value]=\"totalSurfaceSemiCovered()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Semi Covered Surface 50%: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Surface Semi Covered %50 [m2]\" [value]=\"totalSurfaceSemiCovered() / 2\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Total Surface [m2]: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Surface [m2]\" [value]=\"totalSurface()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Maximum Consumption Determined [W]: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Maximum Consumption Determined [W]\" [value]=\"calculateMaximumConsumptionDetermined()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Apparent Power [KVA]: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Apparent Power [KVA]\" [value]=\"apparentPower()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Degree of electrification: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"text\" placeholder=\"Apparent Power [KVA]\" [value]=\"electrificationDegree()\" />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-md-7\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <nb-card accent=\"danger\">\n                  <nb-card-header>Degrees of electrification</nb-card-header>\n                  <nb-card-body>\n                    <table>\n                      <thead>\n                        <tr>\n                          <th style=\"width: 20%;\">Degree of electrification</th>\n                          <th style=\"width: 40%;\">Surface (Application limit)</th>\n                          <th style=\"width: 60%;\">Calculated maximum simultaneous power demand\n                            (only to determine the degree of electrification)</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr [style]=\"isMinimalElectrificationDegree() ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                          <td>\n                            Minimal\n                          </td>\n                          <td>\n                            <= 60 m2\n                          </td>\n                          <td>\n                            <= 3,7 kVA\n                          </td>\n                        </tr>\n                        <tr [style]=\"isMediumElectrificationDegree() ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                          <td>\n                            Medium\n                          </td>\n                          <td>\n                            > 60 m2 && <= 130 m2\n                          </td>\n                          <td>\n                            <= 7 kVA\n                          </td>\n                        </tr>\n                        <tr [style]=\"isHighElectrificationDegree() ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                          <td>\n                            High\n                          </td>\n                          <td>\n                            > 130 m2 && <= 200 m2\n                          </td>\n                          <td>\n                            <= 11 kVA\n                          </td>\n                        </tr>\n                        <tr [style]=\"isUpperElectrificationDegree() ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                          <td>\n                            Upper\n                          </td>\n                          <td>\n                            > 200 m2\n                          </td>\n                          <td>\n                            > 11 kVA\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </nb-card-body>\n                </nb-card>\n              </div>\n            </div>\n\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <nb-card accent=\"danger\">\n                  <nb-card-header>\n                    Minimal circuits according to degree of electrification\n                    <span *ngIf=\"surfaces?.length > 0\">\n                      <a nbButton outline status=\"success\" [routerLink]=\"'../../circuits/' + projectId\">Circuits</a>\n                    </span>\n                  </nb-card-header>\n                  <nb-card-body class=\"form-inline\">\n                    <div class=\"row inline-form-card\" *ngFor=\"let circuit of circuits()\">\n                      <div class=\"col-md-2\">\n                        <input nbInput disabled type=\"text\" [placeholder]=\"circuit\" [value]=\"circuit\" />\n                      </div>\n                    </div>\n                  </nb-card-body>\n                </nb-card>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n"]}