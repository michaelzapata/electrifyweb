{"version":3,"sources":["./src/app/pages/pages-menu.ts","./src/app/pages/pages-routing.module.ts","./src/app/pages/pages.component.ts","./src/app/pages/pages.module.ts","./src/app/pages/projects/artifacts/artifacts.component.ts","./src/app/pages/projects/artifacts/artifacts.component.html","./src/app/pages/projects/circuits/circuits.component.ts","./src/app/pages/projects/circuits/circuits.component.html","./src/app/pages/projects/models/circuittype.model.ts","./src/app/pages/projects/models/electrification-degree-type.model.ts","./src/app/pages/projects/models/surfacetype.model.ts","./src/app/pages/projects/projects-routing.module.ts","./src/app/pages/projects/projects.module.ts","./src/app/pages/projects/projects/projects.component.ts","./src/app/pages/projects/projects/projects.component.html","./src/app/pages/projects/services/artifacts.service.ts","./src/app/pages/projects/services/circuits.service.ts","./src/app/pages/projects/services/projects-calculator.service.ts","./src/app/pages/projects/services/projects.service.ts","./src/app/pages/projects/services/surfaces.service.ts","./src/app/pages/projects/surfaces/surfaces.component.ts","./src/app/pages/projects/surfaces/surfaces.component.html"],"names":[],"mappings":"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","file":"pages-pages-module-es2015.js","sourcesContent":["import { NbMenuItem } from '@nebular/theme';\r\n\r\nexport const MENU_ITEMS: NbMenuItem[] = [\r\n  {\r\n    title: 'Projects',\r\n    icon: 'home-outline',\r\n    link: '/pages/projects',\r\n    home: true,\r\n  },\r\n];\r\n","import { RouterModule, Routes } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { PagesComponent } from './pages.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PagesComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'projects',\r\n\r\n      },\r\n      {\r\n        path: 'projects',\r\n        loadChildren: () => import('./projects/projects.module')\r\n          .then(m => m.ProjectsModule),\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PagesRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\nimport { MENU_ITEMS } from './pages-menu';\r\n\r\n@Component({\r\n  selector: 'ngx-pages',\r\n  styleUrls: ['pages.component.scss'],\r\n  template: `\r\n    <ngx-one-column-layout>\r\n      <nb-menu [items]=\"menu\"></nb-menu>\r\n      <router-outlet></router-outlet>\r\n    </ngx-one-column-layout>\r\n  `,\r\n})\r\nexport class PagesComponent {\r\n\r\n  menu = MENU_ITEMS;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NbMenuModule } from '@nebular/theme';\r\n\r\nimport { ThemeModule } from '../@theme/theme.module';\r\nimport { PagesComponent } from './pages.component';\r\nimport { PagesRoutingModule } from './pages-routing.module';\r\nimport { ProjectsModule } from './projects/projects.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    PagesRoutingModule,\r\n    ThemeModule,\r\n    NbMenuModule,\r\n    ProjectsModule,\r\n  ],\r\n  declarations: [\r\n    PagesComponent,\r\n  ],\r\n})\r\nexport class PagesModule {\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Artifact } from '../models/artifact.model';\nimport { ArtifactsService } from 'app/pages/projects/services/artifacts.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'artifacts',\n  templateUrl: './artifacts.component.html',\n  styleUrls: ['./artifacts.component.scss'],\n})\nexport class ArtifactsComponent implements OnInit {\n  projectId: number;\n  environment: string;\n  artifactForm: FormGroup;\n  artifacts: Artifact[];\n  selectedArtifact: Artifact;\n  isEdit: boolean;\n\n  constructor(\n    private artifactsService: ArtifactsService,\n    private fb: FormBuilder,\n    private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.artifactForm = this.fb.group({\n      name: ['', Validators.required],\n      powerConsumption: ['', Validators.required],\n      summerDay: [false, Validators.required],\n      summerNight: [false, Validators.required],\n      winterDay: [false, Validators.required],\n      winterNight: [false, Validators.required],\n    });\n\n    this.projectId = this.activatedRoute.snapshot.params['projectId'];\n    this.environment = this.activatedRoute.snapshot.params['environment'];\n    this.artifacts = this.artifactsService.getArtifacts(\n      this.activatedRoute.snapshot.params['projectId'],\n      this.activatedRoute.snapshot.params['environment']);\n    this.isEdit = false;\n  }\n\n  saveArtifact() {\n    if(!this.artifactForm.invalid){\n      if(!this.isEdit){\n        let newArtifact = this.artifactForm.value as Artifact;\n        this.artifactsService.saveArtifact(this.projectId, this.environment, newArtifact);\n      } else {\n        let surfaceToUpdate = this.artifactForm.value as Artifact;\n        this.selectedArtifact.name = surfaceToUpdate.name;\n        this.selectedArtifact.powerConsumption = surfaceToUpdate.powerConsumption;\n        this.selectedArtifact.summerDay = surfaceToUpdate.summerDay;\n        this.selectedArtifact.summerNight = surfaceToUpdate.summerNight;\n        this.selectedArtifact.winterDay = surfaceToUpdate.winterDay;\n        this.selectedArtifact.winterNight = surfaceToUpdate.winterNight;\n        this.artifactsService.updateArtifacts(this.projectId, this.environment, this.selectedArtifact);\n      }\n      this.cleanForm();\n    } else {\n      alert('the form is invalid');\n    }\n  }\n\n  cleanForm(): void {\n    this.isEdit = false;\n    this.artifactForm.controls['name'].setValue('');\n    this.artifactForm.controls['powerConsumption'].setValue('');\n    this.artifactForm.controls['summerDay'].setValue(false);\n    this.artifactForm.controls['summerNight'].setValue(false);\n    this.artifactForm.controls['winterDay'].setValue(false);\n    this.artifactForm.controls['winterNight'].setValue(false);\n    this.artifacts = this.artifactsService.getArtifacts(this.projectId, this.environment);\n  }\n\n  editArtifact(environment: string, name: string) {\n    this.selectedArtifact = this.artifactsService.getArtifact(this.projectId, environment, name);\n    this.artifactForm.patchValue(this.selectedArtifact);\n    this.isEdit = true;\n  }\n\n  deleteArtifact(environment: string, name: string){\n    this.artifactsService.deleteArtifact(this.projectId, environment, name);\n    this.cleanForm();\n  }\n\n  isFormInvalid() : boolean {\n    return this.artifactForm.controls['name'].hasError('required')\n    || this.artifactForm.controls['powerConsumption'].hasError('required')\n    || this.artifactForm.controls['summerDay'].hasError('required')\n    || this.artifactForm.controls['summerNight'].hasError('required')\n    || this.artifactForm.controls['winterDay'].hasError('required')\n    || this.artifactForm.controls['winterNight'].hasError('required');\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\">\n      <nb-card-header>Artifact for environment: {{ environment }} <a nbButton outline status=\"info\" [routerLink]=\"'../../../surfaces/' + projectId\">Back to Surfaces</a></nb-card-header>\n      <nb-card-body>\n        <form [formGroup]=\"artifactForm\" class=\"form-inline\">\n          <input nbInput formControlName=\"name\" type=\"text\" placeholder=\"Name\" maxlength=\"100\" />\n          <input nbInput formControlName=\"powerConsumption\" type=\"number\" placeholder=\"Power Consumption [W]\" />\n          <nb-toggle formControlName=\"summerDay\" status=\"info\">Consume In Summer Day</nb-toggle>\n          <nb-toggle formControlName=\"summerNight\" status=\"info\">Consume In Summer Night</nb-toggle>\n          <nb-toggle formControlName=\"winterDay\" status=\"info\">Consume In Winter Day</nb-toggle>\n          <nb-toggle formControlName=\"winterNight\" status=\"info\">Consume In Winter Night</nb-toggle>\n          <button\n            outline\n            [disabled]=\"isFormInvalid()\"\n            nbButton\n            status=\"primary\"\n            (click)=\"saveArtifact()\">{{ !isEdit ? 'Save Artifact' : 'Update Artifact' }}</button>\n\n            <button *ngIf=\"isEdit\" outline nbButton status=\"danger\" (click)=\"cleanForm()\">Cancel</button>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"artifacts?.length > 0\">\n      <nb-card-header>Artifacts</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li *ngFor=\"let artifact of artifacts\" class=\"form-inline\">\n            <input nbInput disabled type=\"text\" placeholder=\"Name\" [value]=\"artifact.name\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Power Consumption [W]\" [value]=\"artifact.powerConsumption\" />\n            <nb-toggle disabled [checked]=\"artifact.summerDay\" status=\"info\">Consume In Summer Day</nb-toggle>\n            <nb-toggle disabled [checked]=\"artifact.summerNight\" status=\"info\">Consume In Summer Night</nb-toggle>\n            <nb-toggle disabled [checked]=\"artifact.winterDay\" status=\"info\">Consume In Winter Day</nb-toggle>\n            <nb-toggle disabled [checked]=\"artifact.winterNight\" status=\"info\">Consume In Winter Night</nb-toggle>\n            <button nbButton outline (click)=\"editArtifact(environment, artifact.name)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteArtifact(environment, artifact.name)\" status=\"danger\">Delete</button>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Circuit } from '../models/circuit.model';\nimport { CircuitsService } from '../services/circuits.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { CircuitType } from '../models/circuittype.model';\nimport { ElectrificationDegreeType } from '../models/electrification-degree-type.model';\nimport { ProjectsCalculatorService, Protection, ProtectionType, SectionNominal, TechnicalFeature, TensionDrop } from '../services/projects-calculator.service';\nimport { SurfacesService } from '../services/surfaces.service';\n\n@Component({\n  selector: 'circuits',\n  templateUrl: './circuits.component.html',\n  styleUrls: ['./circuits.component.scss'],\n})\nexport class CircuitsComponent implements OnInit {\n  projectId: number;\n  circuitForm: FormGroup;\n  circuits: Circuit[];\n  selectedCircuit: Circuit;\n  isEdit: boolean;\n\n  constructor(\n    private circuitsService: CircuitsService,\n    private surfacesService: SurfacesService,\n    private fb: FormBuilder,\n    private activatedRoute: ActivatedRoute,\n    private projectsCalculatorService: ProjectsCalculatorService) { }\n\n  ngOnInit(): void {\n    this.circuitForm = this.fb.group({\n      name: ['', Validators.required],\n      circuitType: ['', Validators.required],\n      numberOfMouths: ['', Validators.required],\n      length: ['', Validators.required],\n    });\n\n    this.projectId = parseInt(this.activatedRoute.snapshot.params['projectId']);\n    this.circuits = this.circuitsService.getCircuits(parseInt(this.activatedRoute.snapshot.params['projectId']));\n    this.isEdit = false;\n  }\n\n  saveCircuit() {\n    if(!this.circuitForm.invalid){\n      if(!this.isEdit){\n        let newCircuit = this.circuitForm.value as Circuit;\n        this.circuitsService.saveCircuit(this.projectId, newCircuit);\n      } else {\n        let circuitToUpdate = this.circuitForm.value as Circuit;\n        this.selectedCircuit.name = circuitToUpdate.name;\n        this.selectedCircuit.circuitType = circuitToUpdate.circuitType;\n        this.selectedCircuit.numberOfMouths = circuitToUpdate.numberOfMouths;\n        this.selectedCircuit.length = circuitToUpdate.length;\n        this.circuitsService.updateCircuit(this.projectId, this.selectedCircuit);\n      }\n      this.cleanForm();\n    } else {\n      alert('the form is invalid');\n    }\n  }\n\n  cleanForm(): void {\n    this.isEdit = false;\n    this.circuitForm.controls['name'].setValue('');\n    this.circuitForm.controls['circuitType'].setValue('');\n    this.circuitForm.controls['numberOfMouths'].setValue('');\n    this.circuitForm.controls['length'].setValue('');\n    this.circuits = this.circuitsService.getCircuits(this.projectId);\n  }\n\n  editCircuit(name: string) {\n    this.selectedCircuit = this.circuitsService.getCircuit(this.projectId, name);\n    this.circuitForm.patchValue(this.selectedCircuit);\n    this.isEdit = true;\n  }\n\n  deleteCircuit(name: string){\n    this.circuitsService.deleteCircuit(this.projectId, name);\n    this.cleanForm();\n  }\n\n  isFormInvalid() : boolean {\n    return this.circuitForm.controls['name'].hasError('required')\n    || this.circuitForm.controls['circuitType'].hasError('required')\n    || this.circuitForm.controls['numberOfMouths'].hasError('required')\n    || this.circuitForm.controls['length'].hasError('required');\n  }\n\n  circuitType(circuitType: CircuitType): CircuitType{\n    return circuitType;\n  }\n\n  maxNumberOfMouths(circuitType: CircuitType): number {\n    return this.projectsCalculatorService.maxNumberOfMouths(circuitType);\n  }\n\n  powerLoad(circuitType: CircuitType) : number {\n    if(circuitType == CircuitType.LAP){\n      return this.circuitLAPTotal();\n    }\n    return this.projectsCalculatorService.powerLoad(circuitType);\n  }\n\n  factorLoad(circuitType: CircuitType) : number {\n    return this.projectsCalculatorService.factorLoad(circuitType);\n  }\n\n  simultaneityCoefficient(electrificationDegreeType: ElectrificationDegreeType){\n    return this.projectsCalculatorService.simultaneityCoefficient(electrificationDegreeType);\n  }\n\n  electrificationDegree(electrificationDegreeType: ElectrificationDegreeType){\n    return electrificationDegreeType;\n  }\n\n  circuitLAPTotal() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    let totalSurface = this.projectsCalculatorService.totalSurface(surfaces);\n    let apparentPower = this.projectsCalculatorService.apparentPower(surfaces);\n    let electrificationDegree = this.projectsCalculatorService.electrificationDegree(totalSurface, apparentPower);\n    let simultaneityCoefficient = this.simultaneityCoefficient(electrificationDegree);\n    return Math.ceil(this.projectsCalculatorService.circuitLAPTotal(this.circuits, simultaneityCoefficient));\n  }\n\n  simultaneityCoefficientDetermined() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    let totalSurface = this.projectsCalculatorService.totalSurface(surfaces);\n    let apparentPower = this.projectsCalculatorService.apparentPower(surfaces);\n    let electrificationDegree = this.projectsCalculatorService.electrificationDegree(totalSurface, apparentPower);\n    return this.simultaneityCoefficient(electrificationDegree);\n  }\n\n  calculateCurrent(circuitType: CircuitType){\n    const cosPhi = 0.9;\n    const Volts = 220;\n    if(circuitType == CircuitType.LAP){\n      return parseFloat((this.circuitLAPTotal() / (Volts * cosPhi)).toFixed(2));\n    }\n    return parseFloat((this.powerLoad(circuitType) / (Volts * cosPhi)).toFixed(2));\n  }\n\n  nominalSection(circuit: Circuit) : number{\n    let current = this.calculateCurrent(circuit.circuitType);\n    let nominalSection = this.projectsCalculatorService.nominalSectionByCurrentIntensity(current);\n    let nominalSections = this.projectsCalculatorService.sectionNominals();\n    let minimalNominalSection = nominalSections.find(ns => ns.circuitType == circuit.circuitType);\n    let tryLAP = circuit.circuitType == CircuitType.LAP;\n\n    if(minimalNominalSection && nominalSection > minimalNominalSection.minSectionNominal) {\n      return this.projectsCalculatorService.validateNominalSection(\n        this.technicalFeatures(),\n        circuit,\n        nominalSection,\n        this.powerLoad(circuit.circuitType),\n        tryLAP);\n    }\n    return this.projectsCalculatorService.validateNominalSection(\n      this.technicalFeatures(),\n      circuit,\n      minimalNominalSection.minSectionNominal,\n      this.powerLoad(circuit.circuitType),\n      tryLAP);\n  }\n\n  technicalFeatures(): TechnicalFeature[] {\n    return this.projectsCalculatorService.tecnicalFeatures();\n  }\n\n  calculateTensionDrop(circuit: Circuit): number {\n    let nominalSection = this.nominalSection(circuit);\n    let powerLoad = this.powerLoad(circuit.circuitType);\n    return this.projectsCalculatorService.calcuteTensionDrop(circuit, nominalSection, powerLoad);\n  }\n\n  tensionDrops() : TensionDrop[]{\n    return this.projectsCalculatorService.tensionDrops();\n  }\n\n  tensionDrop(circuitType: CircuitType): number {\n    let tensionDrops = this.projectsCalculatorService.tensionDrops();\n    let tensionDrop = tensionDrops.find(td => td.circuitType == circuitType);\n    return tensionDrop?.maxTensionDrop || 0;\n  }\n\n  isValidTension(circuit: Circuit): boolean {\n    let tensionDropCalculated = this.calculateTensionDrop(circuit);\n    let tendionDrop = this.tensionDrop(circuit.circuitType);\n    return tensionDropCalculated <= tendionDrop;\n  }\n\n  sectionNominals() : SectionNominal[] {\n    return this.projectsCalculatorService.sectionNominals();\n  }\n\n  calculateProtection(circuit: Circuit) : Protection {\n    let current = this.calculateCurrent(circuit.circuitType);\n    let isLAP = circuit.circuitType == CircuitType.LAP;\n    let protectionCalculated = this.projectsCalculatorService.calculateProtection(current, isLAP);\n    if(!this.isValidProtection(circuit, protectionCalculated)){\n      let nominalSectionCalculated = this.nominalSection(circuit);\n      let technicalFeature = this.projectsCalculatorService\n        .tecnicalFeatures()\n        .find( tf => tf.nominalSection == nominalSectionCalculated);\n\n        if(Math.abs(technicalFeature.allowableCurrentIntensityInPipes - current) < 1){\n        return this.projectsCalculatorService\n          .calculateProtection(technicalFeature.allowableCurrentIntensityInPipes, isLAP);\n      }\n    }\n    return protectionCalculated;\n  }\n\n  isValidProtection(circuit: Circuit, protection: Protection) : boolean {\n    // 1.- Ib < I1\n    // 2.- In <= Iz\n    let nominalSectionCalculated = this.nominalSection(circuit);\n    let Ib = this.calculateCurrent(circuit.circuitType);\n    let Iz = this.projectsCalculatorService.tecnicalFeatures()\n      .find( tf => tf.nominalSection == nominalSectionCalculated).allowableCurrentIntensityInPipes;\n    let In = protection;\n    let I1 = parseFloat((1.13 * In.protectionValue).toFixed(2));\n    return Ib < I1 && In.protectionValue <= Iz;\n  }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\">\n      <nb-card-header>Circuit <a nbButton outline status=\"info\" [routerLink]=\"'../../../projects'\">Back to Proyects</a></nb-card-header>\n      <nb-card-body>\n        <form [formGroup]=\"circuitForm\" class=\"form-inline\">\n          <input nbInput formControlName=\"name\" type=\"text\" placeholder=\"Name\" maxlength=\"100\" />\n          <nb-select placeholder=\"Choose a circuit type\" formControlName=\"circuitType\">\n            <nb-option value=\"IUG\">IUG</nb-option>\n            <nb-option value=\"TUG\">TUG</nb-option>\n            <nb-option value=\"IUE\">IUE</nb-option>\n            <nb-option value=\"TUE\">TUE</nb-option>\n            <nb-option value=\"LAP\">LAP</nb-option>\n          </nb-select>\n          <input nbInput formControlName=\"numberOfMouths\" type=\"number\" placeholder=\"Number Of Mouths\" />\n          <input nbInput formControlName=\"length\" type=\"number\" placeholder=\"Length [m]\" />\n          <button\n            outline\n            [disabled]=\"isFormInvalid()\"\n            nbButton\n            status=\"primary\"\n            (click)=\"saveCircuit()\">{{ !isEdit ? 'Save Circuit' : 'Update Circuit' }}</button>\n\n            <button *ngIf=\"isEdit\" outline nbButton status=\"danger\" (click)=\"cleanForm()\">Cancel</button>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"circuits?.length > 0\">\n      <nb-card-header>Circuits</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li class=\"form-inline\">\n            <input class=\"input-inline-name\" nbInput disabled type=\"text\" value=\"Name\" />\n            <input class=\"input-inline-circuit-type\" nbInput disabled type=\"text\" value=\"Circuit Type\" />\n            <input class=\"input-inline-mouths\" nbInput disabled type=\"text\" placeholder=\"Number Of Mouths\" value=\"Number Of Mouths\" />\n            <input class=\"input-inline-length\" nbInput disabled type=\"text\" placeholder=\"Length\" value=\"Length [m]\" />\n            <input class=\"input-inline-power\" nbInput disabled type=\"text\" placeholder=\"Power [W]\" value=\"Power [W]\" />\n            <input class=\"input-inline-current\" nbInput disabled type=\"text\" placeholder=\"Current [A]\" value=\"Current [A]\" />\n            <input class=\"input-inline-section\" nbInput disabled type=\"text\" placeholder=\"Section [mm2]\" value=\"Section [mm2]\" />\n            <input class=\"input-inline-tension\" nbInput disabled type=\"text\" placeholder=\"[e%]\" value=\"[e%]\" />\n            <input class=\"input-inline-protection\" nbInput disabled type=\"text\" placeholder=\"Protection\" value=\"Protection\" />\n          </li>\n        </ul>\n        <ul>\n          <li *ngFor=\"let circuit of circuits\" class=\"form-inline\">\n            <input class=\"input-inline-name\" nbInput disabled type=\"text\" placeholder=\"Name\" [value]=\"circuit.name\" />\n            <input class=\"input-inline-circuit-type\" nbInput disabled type=\"text\" placeholder=\"Circuit Type\" [value]=\"circuit.circuitType\" />\n            <input\n              nbInput\n              class=\"input-inline-mouths\"\n              [status]=\"circuit.numberOfMouths <= maxNumberOfMouths(circuit.circuitType) ? 'success' : 'danger'\"\n              readonly\n              type=\"number\"\n              placeholder=\"Number Of Mouths\"\n              [value]=\"circuit.numberOfMouths\" />\n            <input class=\"input-inline-length\" nbInput disabled type=\"number\" placeholder=\"Length\" [value]=\"circuit.length\" />\n            <input class=\"input-inline-power\" nbInput disabled type=\"number\" placeholder=\"Power [W]\" [value]=\"powerLoad(circuit.circuitType)\" />\n            <input class=\"input-inline-current\" nbInput disabled type=\"text\" placeholder=\"Current [A]\" [value]=\"calculateCurrent(circuit.circuitType)\" />\n            <input class=\"input-inline-section\" nbInput disabled type=\"text\" placeholder=\"Section [mm2]\" [value]=\"nominalSection(circuit)\" />\n            <input\n              class=\"input-inline-tension\"\n              nbInput\n              readonly\n              [status]=\"isValidTension(circuit) ? 'success' : 'danger'\"\n              type=\"text\"\n              placeholder=\"[e%]\"\n              [value]=\"calculateTensionDrop(circuit)\" />\n              <input\n                class=\"input-inline-protection\"\n                nbInput\n                readonly\n                [status]=\"isValidProtection(circuit, calculateProtection(circuit)) ? 'success' : 'danger'\"\n                type=\"text\"\n                placeholder=\"Protection\"\n                [value]=\"calculateProtection(circuit)?.protectionType\" />\n            <button nbButton outline (click)=\"editCircuit(circuit.name)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteCircuit(circuit.name)\" status=\"danger\">Delete</button>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" *ngIf=\"circuits?.length > 0\">\n      <nb-card-header>References</nb-card-header>\n      <nb-card-body>\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"danger\">\n              <nb-card-header>Number of Mouths</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Circuit Type</th>\n                      <th style=\"width: 20%;\">Designation</th>\n                      <th style=\"width: 20%;\">Maximum Number of Mouths</th>\n                      <th style=\"width: 20%;\">Power Load</th>\n                      <th style=\"width: 20%;\">Factor Load</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>\n                        {{ circuitType('IUG') }}\n                      </td>\n                      <td>\n                        General purpose lighting\n                      </td>\n                      <td>\n                        {{ maxNumberOfMouths('IUG') }}\n                      </td>\n                      <td>\n                        {{ powerLoad('IUG') }}\n                      </td>\n                      <td>\n                        {{ factorLoad('IUG') }}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        {{ circuitType('TUG') }}\n                      </td>\n                      <td>\n                        General purpose sockets\n                      </td>\n                      <td>\n                        {{ maxNumberOfMouths('TUG') }}\n                      </td>\n                      <td>\n                        {{ powerLoad('TUG') }}\n                      </td>\n                      <td>\n                        {{ factorLoad('TUG') }}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        {{ circuitType('IUE') }}\n                      </td>\n                      <td>\n                        Special use lighting\n                      </td>\n                      <td>\n                        {{ maxNumberOfMouths('IUE') }}\n                      </td>\n                      <td>\n                        {{ powerLoad('IUE') }}\n                      </td>\n                      <td>\n                        {{ factorLoad('IUE') }}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>\n                        {{ circuitType('TUE') }}\n                      </td>\n                      <td>\n                        Special purpose sockets\n                      </td>\n                      <td>\n                        {{ maxNumberOfMouths('TUE') }}\n                      </td>\n                      <td>\n                        {{ powerLoad('TUE') }}\n                      </td>\n                      <td>\n                        {{ factorLoad('TUE') }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"success\">\n              <nb-card-header>Simultaneity Coefficient</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Electrification Degree</th>\n                      <th style=\"width: 20%;\">Simultaneity Coefficient</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr [style]=\"simultaneityCoefficientDetermined() == simultaneityCoefficient('Minimal') ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                      <td>\n                        {{ electrificationDegree('Minimal') }}\n                      </td>\n                      <td>\n                        {{ simultaneityCoefficient('Minimal') }}\n                      </td>\n                    </tr>\n                    <tr [style]=\"simultaneityCoefficientDetermined() == simultaneityCoefficient('Medium') ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                      <td>\n                        {{ electrificationDegree('Medium') }}\n                      </td>\n                      <td>\n                        {{ simultaneityCoefficient('Medium') }}\n                      </td>\n                    </tr>\n                    <tr [style]=\"simultaneityCoefficientDetermined() == simultaneityCoefficient('High') ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                      <td>\n                        {{ electrificationDegree('High') }}\n                      </td>\n                      <td>\n                        {{ simultaneityCoefficient('High') }}\n                      </td>\n                    </tr>\n                    <tr [style]=\"simultaneityCoefficientDetermined() == simultaneityCoefficient('Upper') ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                      <td>\n                        {{ electrificationDegree('Upper') }}\n                      </td>\n                      <td>\n                        {{ simultaneityCoefficient('Upper') }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"warning\">\n              <nb-card-header>Technical Features</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Nominal Section</th>\n                      <th style=\"width: 20%;\">Allowable CurrentIntensity In Pipes</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let technicalFeature of technicalFeatures()\">\n                      <td>\n                        {{ technicalFeature.nominalSection }}\n                      </td>\n                      <td>\n                        {{ technicalFeature.allowableCurrentIntensityInPipes }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"warning\">\n              <nb-card-header>Tension Drops</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Circuit Type</th>\n                      <th style=\"width: 20%;\">[e%]</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let tensionDrop of tensionDrops()\">\n                      <td>\n                        {{ tensionDrop.circuitType }}\n                      </td>\n                      <td>\n                        <= {{ tensionDrop.maxTensionDrop }} %\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-12\">\n            <nb-card accent=\"warning\">\n              <nb-card-header>Nominal Sections</nb-card-header>\n              <nb-card-body>\n                <table>\n                  <thead>\n                    <tr>\n                      <th style=\"width: 20%;\">Circuit Type</th>\n                      <th style=\"width: 20%;\">Nominal Section</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr *ngFor=\"let sectionNominal of sectionNominals()\">\n                      <td>\n                        {{ sectionNominal.circuitType }}\n                      </td>\n                      <td>\n                        >= {{ sectionNominal.minSectionNominal }} mm2\n                      </td>\n                    </tr>\n                  </tbody>\n                </table>\n              </nb-card-body>\n            </nb-card>\n\n          </div>\n        </div>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n","export enum CircuitType {\r\n  IUG = 'IUG',\r\n  TUG = 'TUG',\r\n  IUE = 'IUE',\r\n  TUE = 'TUE',\r\n  LAP = 'LAP',\r\n}\r\n","export enum ElectrificationDegreeType {\r\n  Minimal = 'Minimal',\r\n  Medium = 'Medium',\r\n  High = 'High',\r\n  Upper = 'Upper',\r\n}\r\n","export enum SurfaceType {\r\n  'Covered',\r\n  'SemiCovered',\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ProjectsComponent } from './projects/projects.component';\nimport { SurfacesComponent } from './surfaces/surfaces.component';\nimport { ArtifactsComponent } from './artifacts/artifacts.component';\nimport { CircuitsComponent } from './circuits/circuits.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProjectsComponent,\n  },\n  {\n    path: 'surfaces/:projectId',\n    component: SurfacesComponent,\n  },\n  {\n    path: 'circuits/:projectId',\n    component: CircuitsComponent,\n  },\n  {\n    path: 'artifacts/:projectId/:environment',\n    component: ArtifactsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProjectsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProjectsRoutingModule } from './projects-routing.module';\nimport { ProjectsComponent } from './projects/projects.component';\nimport { NbButtonModule, NbCardModule, NbInputModule, NbSelectModule, NbStepperModule, NbToggleModule } from '@nebular/theme';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { SurfacesComponent } from './surfaces/surfaces.component';\nimport { ArtifactsComponent } from './artifacts/artifacts.component';\nimport { CircuitsComponent } from './circuits/circuits.component';\n\n@NgModule({\n  declarations: [\n    ProjectsComponent,\n    SurfacesComponent,\n    ArtifactsComponent,\n    CircuitsComponent],\n  imports: [\n    CommonModule,\n    ProjectsRoutingModule,\n    NbCardModule,\n    NbStepperModule,\n    FormsModule,\n    NbButtonModule,\n    ReactiveFormsModule,\n    NbInputModule,\n    NbSelectModule,\n    NbToggleModule,\n  ],\n})\nexport class ProjectsModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Project } from '../models/project.model';\nimport { ProjectsService } from 'app/pages/projects/services/projects.service';\n\n@Component({\n  selector: 'projects',\n  templateUrl: './projects.component.html',\n  styleUrls: ['./projects.component.scss'],\n})\nexport class ProjectsComponent implements OnInit {\n\n  projectForm: FormGroup;\n  projects: Project[];\n  selectedProject: Project;\n  isEdit: boolean;\n\n  constructor(\n    private projectsService: ProjectsService,\n    private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.projectForm = this.fb.group({\n      name: ['', Validators.required],\n    });\n    this.projects = this.projectsService.getProjects();\n    this.isEdit = false;\n  }\n\n  saveProject() {\n    if(!this.projectForm.invalid){\n      if(!this.isEdit){\n        let newProject = this.projectForm.value as Project;\n        newProject.surfaces = [];\n        newProject.circuits = [];\n        this.projectsService.saveProject(newProject);\n      } else {\n        let projectToUpdate = this.projectForm.value as Project;\n        if(!this.selectedProject?.surfaces){\n          this.selectedProject.surfaces = [];\n        }\n        if(!this.selectedProject?.circuits){\n          this.selectedProject.circuits = [];\n        }\n        this.selectedProject.name = projectToUpdate.name;\n        this.projectsService.updateProject(this.selectedProject.id, this.selectedProject);\n      }\n      this.cleanForm();\n    } else {\n      alert('the form is invalid');\n    }\n  }\n  cleanForm(): void {\n    this.isEdit = false;\n    this.projectForm.controls['name'].setValue('');\n    this.projects = this.projectsService.getProjects();\n  }\n\n  editProject(id: number) {\n    this.selectedProject = this.projectsService.getProjectById(id);\n    this.projectForm.patchValue(this.selectedProject);\n    this.isEdit = true;\n  }\n\n  deleteProject(id: number){\n    this.projectsService.deleteProject(id);\n    this.cleanForm();\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\">\n      <nb-card-header>Project</nb-card-header>\n      <nb-card-body>\n        <form [formGroup]=\"projectForm\" class=\"form-inline\">\n          <input nbInput formControlName=\"name\" type=\"text\" placeholder=\"Project Name\" maxlength=\"100\" />\n          <button outline [disabled]=\"projectForm.controls['name'].hasError('required')\" nbButton status=\"primary\" (click)=\"saveProject()\">{{ !isEdit ? 'Save Project' : 'Update Project' }}</button>\n          <button *ngIf=\"isEdit\" outline nbButton status=\"danger\" (click)=\"cleanForm()\">Cancel</button>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"projects?.length > 0\">\n      <nb-card-header>Proyects</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li *ngFor=\"let project of projects\" class=\"form-inline\">\n            <input nbInput type=\"text\" disabled [value]=\"project.id\" />\n            <input nbInput type=\"text\" disabled maxlength=\"100\" [value]=\"project.name\" />\n            <button nbButton outline (click)=\"editProject(project.id)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteProject(project.id)\" status=\"danger\">Delete</button>\n            <a nbButton outline status=\"info\" [routerLink]=\"'./surfaces/' + project.id\">Surfaces</a>\n            <span *ngIf=\"project.surfaces?.length > 0\">\n              <a nbButton outline status=\"success\" [routerLink]=\"'./circuits/' + project.id\">Circuits</a>\n            </span>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { SurfacesService } from './surfaces.service';\nimport { Artifact } from '../models/artifact.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ArtifactsService {\n\n  constructor(\n    private surfacesService: SurfacesService,\n  ) { }\n\n  saveArtifact(projectId: number, environment: string, artifact: Artifact){\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    if(surface != null){\n\n      if(!surface.artifacts)\n        surface.artifacts = [];\n\n      surface.artifacts.push(artifact);\n      this.surfacesService.updateSurface(projectId, surface);\n    }\n  }\n\n  updateArtifacts(projectId: number, environment: string, updatedArtifact: Artifact){\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    if(surface){\n      const index = surface.artifacts\n        .findIndex((artifact) => artifact.name == updatedArtifact.name);\n      if(index != 1){\n        surface.artifacts[index] = updatedArtifact;\n        this.surfacesService.updateSurface(projectId, surface);\n      }\n    }\n  }\n\n  deleteArtifact(projectId: number, environment: string, name: string) {\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    if(surface){\n      surface.artifacts = surface.artifacts.filter(a => a.name != name);\n      this.surfacesService.updateSurface(projectId, surface);\n    }\n  }\n\n  getArtifact(projectId: number, environment: string, name: string): Artifact | null {\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    return surface?.artifacts ? surface?.artifacts.find((artifact) => artifact.name == name) : null;\n  }\n\n  getArtifacts(projectId: number, environment: string): Artifact[] {\n    let surface = this.surfacesService.getSurface(projectId, environment);\n    return surface?.artifacts || [];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ProjectsService } from './projects.service';\nimport { Circuit } from '../models/circuit.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CircuitsService {\n\n  constructor(private projectsService: ProjectsService) { }\n\n  saveCircuit(projectId: number, circuit: Circuit) {\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectId);\n    if(index != -1){\n      let project = projects[index];\n\n      if(!project.circuits)\n        project.circuits = [];\n\n      project.circuits.push(circuit);\n      this.projectsService.updateProject(projectId, project);\n    }\n  }\n\n  updateCircuit(projectid: number, updatedCircuit: Circuit){\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectid);\n    if(index != -1){\n      let circuits = projects[index]?.circuits;\n      if(circuits){\n        let indexCircuit = circuits.findIndex(s => s.name == updatedCircuit.name);\n        if(indexCircuit != -1){\n          circuits[indexCircuit] = updatedCircuit;\n          projects[index].circuits = circuits;\n          this.projectsService.updateProject(projectid, projects[index]);\n        }\n      }\n    }\n  }\n\n  deleteCircuit(projectId: number, name: string) {\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectId);\n    if(index != -1){\n      let project = projects[index];\n      project.circuits = project.circuits.filter(s => s.name != name);\n      this.projectsService.updateProject(projectId, project);\n    }\n  }\n\n  getCircuit(projectId: number, name: string): Circuit | null {\n    const project = this.projectsService.getProjectById(projectId);\n    return project?.circuits ? project?.circuits.find((circuit) => circuit.name == name) : null;\n  }\n\n  getCircuits(projectId: number): Circuit[] {\n    const project = this.projectsService.getProjectById(projectId);\n    return project?.circuits || [];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Surface } from '../models/surface.model';\nimport { Artifact } from '../models/artifact.model';\nimport { SurfaceType } from '../models/surfacetype.model';\nimport { ElectrificationDegreeType } from '../models/electrification-degree-type.model';\nimport { CircuitType } from '../models/circuittype.model';\nimport { Circuit } from '../models/circuit.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectsCalculatorService {\n\n  constructor() { }\n\n  totalSurfaceCovered(surfaces: Surface[]) : number{\n    return surfaces.reduce(\n      (sum, item) => item.type == SurfaceType.Covered ?\n        sum + parseFloat((item.width * item.length).toFixed(2)) : sum + 0, 0);\n  }\n\n  totalSurfaceSemiCovered(surfaces: Surface[]) : number {\n    return surfaces.reduce(\n      (sum, item) => item.type == SurfaceType.SemiCovered ?\n        sum + parseFloat((item.width * item.length).toFixed(2)) : sum + 0, 0);\n  }\n\n  totalSurface(surfaces: Surface[]) : number {\n    return this.totalSurfaceCovered(surfaces) + ( this.totalSurfaceSemiCovered(surfaces) / 2 );\n  }\n\n  apparentPower(surfaces: Surface[]): number {\n    let maximumConsumptionDetermined = this.calculateMaximumConsumptionDetermined(surfaces);\n    return parseFloat(((maximumConsumptionDetermined / 0.9) / 1000 ).toFixed(2));\n  }\n\n  circuitsByelectrificationDegree(electrificationDegreeType: ElectrificationDegreeType) : CircuitType[] {\n    let circuits = [];\n    switch(electrificationDegreeType){\n      case ElectrificationDegreeType.Minimal:\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.TUG);\n        break;\n      case ElectrificationDegreeType.Medium:\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.TUG);\n        break;\n      case ElectrificationDegreeType.High:\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.TUG);\n        circuits.push(CircuitType.TUG);\n        circuits.push(CircuitType.TUE);\n        break;\n      default:\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.IUG);\n        circuits.push(CircuitType.TUG);\n        circuits.push(CircuitType.TUG);\n        circuits.push(CircuitType.TUE);\n        break;\n    }\n    return circuits;\n  }\n\n  electrificationDegree(surface: number, apparentPower: number): ElectrificationDegreeType {\n    if (surface <= 60 && apparentPower <= 3.7) {\n      return ElectrificationDegreeType.Minimal;\n    } else if (surface <= 130 && apparentPower <= 7) {\n      return ElectrificationDegreeType.Medium;\n    } else if (surface <= 200 && apparentPower <= 11) {\n      return ElectrificationDegreeType.High;\n    } else {\n      return ElectrificationDegreeType.Upper;\n    }\n  }\n\n  simultaneityCoefficient(electrificationDegreeType: ElectrificationDegreeType) : number {\n    switch(electrificationDegreeType){\n      case ElectrificationDegreeType.Minimal:\n        return 1;\n      case ElectrificationDegreeType.Medium:\n        return 0.9;\n      case ElectrificationDegreeType.High:\n        return 0.8;\n      case ElectrificationDegreeType.Upper:\n        return 0.7;\n      default:\n        return 0;\n    }\n  }\n\n  maxNumberOfMouths(circuitType: CircuitType) {\n    switch(circuitType){\n      case CircuitType.IUG:\n      case CircuitType.TUG:\n        return 15;\n      case CircuitType.IUE:\n      case CircuitType.TUE:\n        return 12;\n      default:\n        return 0;\n    }\n  }\n\n  powerLoad(circuitType: CircuitType): number {\n    switch (circuitType) {\n      case CircuitType.IUG:\n        return 810;\n      case CircuitType.TUG:\n        return 1980;\n      case CircuitType.IUE:\n      case CircuitType.TUE:\n        return 2970;\n      default:\n        return 0;\n    }\n  }\n\n  factorLoad(circuitType: CircuitType): number {\n    switch (circuitType) {\n      case CircuitType.IUG:\n        return 0.66;\n      case CircuitType.TUG:\n      case CircuitType.IUE:\n      case CircuitType.TUE:\n        return 1;\n      default:\n        return 0;\n    }\n  }\n\n  calculateMaximumConsumptionDetermined(surfaces: Surface[]) : number {\n    let maximumConsumptionDetermined = 0;\n    let artifactResult = this.calculateConsumptionOfEachMoment(surfaces);\n    if(artifactResult.summerDayConsumptionDetermined >= maximumConsumptionDetermined){\n      maximumConsumptionDetermined = artifactResult.summerDayConsumptionDetermined;\n    }\n\n    if(artifactResult.summerNightConsumptionDetermined >= maximumConsumptionDetermined){\n      maximumConsumptionDetermined = artifactResult.summerNightConsumptionDetermined;\n    }\n\n    if(artifactResult.winterDayConsumptionDetermined >= maximumConsumptionDetermined){\n      maximumConsumptionDetermined = artifactResult.winterDayConsumptionDetermined;\n    }\n\n    if(artifactResult.winterNightConsumptionDetermined >= maximumConsumptionDetermined){\n      maximumConsumptionDetermined = artifactResult.winterNightConsumptionDetermined;\n    }\n    return maximumConsumptionDetermined;\n  }\n\n  private calculateConsumptionOfEachMoment(surfaces: Surface[]) : ArtifactResult {\n    return surfaces.reduce((accumulator: ArtifactResult, surface: Surface) => {\n      return surface.artifacts.reduce((artifactAccumulator: ArtifactResult, artifact: Artifact) => {\n        if (artifact.summerDay) {\n          artifactAccumulator.summerDayConsumptionDetermined += artifact.powerConsumption;\n        }\n        if (artifact.summerNight) {\n          artifactAccumulator.summerNightConsumptionDetermined += artifact.powerConsumption;\n        }\n        if (artifact.winterDay) {\n          artifactAccumulator.winterDayConsumptionDetermined += artifact.powerConsumption;\n        }\n        if (artifact.winterNight) {\n          artifactAccumulator.winterNightConsumptionDetermined += artifact.powerConsumption;\n        }\n        return artifactAccumulator;\n      }, accumulator);\n    }, {\n      summerDayConsumptionDetermined: 0,\n      summerNightConsumptionDetermined: 0,\n      winterDayConsumptionDetermined: 0,\n      winterNightConsumptionDetermined: 0,\n    });\n  }\n\n  circuitLAPTotal(circuits: Circuit[] = [], simultaneityCoefficient: number) : number {\n\n      let circuitsWithoutLAP = circuits.filter(c => c.circuitType != CircuitType.LAP);\n      let subtotal = circuitsWithoutLAP.reduce(\n        (sum, circuit) =>\n          sum + parseFloat((this.powerLoad(circuit.circuitType) * this.factorLoad(circuit.circuitType)).toFixed(2)), 0);\n\n      return parseFloat((subtotal * simultaneityCoefficient).toFixed(2));\n  }\n\n  circuitSubtotal(circuitType: CircuitType) : number {\n    return parseFloat((this.powerLoad(circuitType) * this.factorLoad(circuitType)).toFixed(2));\n  }\n\n  nominalSectionByCurrentIntensity(current: number) : number {\n    let tecnicalFeatures = this.tecnicalFeatures();\n    let tecnicalFeature = tecnicalFeatures.find(tf => current <= tf.allowableCurrentIntensityInPipes);\n    return tecnicalFeature.nominalSection;\n  }\n\n  tecnicalFeatures(): TechnicalFeature[] {\n    return [\n      { nominalSection: 0.75, allowableCurrentIntensityInPipes: 8.0 },\n      { nominalSection: 1.0, allowableCurrentIntensityInPipes: 10.5 },\n      { nominalSection: 1.5, allowableCurrentIntensityInPipes: 13.0 },\n      { nominalSection: 2.5, allowableCurrentIntensityInPipes: 18.0 },\n      { nominalSection: 4.0, allowableCurrentIntensityInPipes: 25.0 },\n      { nominalSection: 6.0, allowableCurrentIntensityInPipes: 32.0 },\n      { nominalSection: 10.0, allowableCurrentIntensityInPipes: 44.0 },\n      { nominalSection: 16.0, allowableCurrentIntensityInPipes: 59.0 },\n      { nominalSection: 25.0, allowableCurrentIntensityInPipes: 77.0 },\n      { nominalSection: 35.0, allowableCurrentIntensityInPipes: 96.0 },\n      { nominalSection: 50.0, allowableCurrentIntensityInPipes: 117.0 },\n      { nominalSection: 70.0, allowableCurrentIntensityInPipes: 149.0 },\n      { nominalSection: 95.0, allowableCurrentIntensityInPipes: 180.0 },\n      { nominalSection: 120.0, allowableCurrentIntensityInPipes: 208.0 },\n    ] as TechnicalFeature[];\n  }\n\n  tensionDrops(): TensionDrop[]{\n    return [\n      { circuitType: CircuitType.LAP, maxTensionDrop: 1 },\n      { circuitType: CircuitType.IUG, maxTensionDrop: 2 },\n      { circuitType: CircuitType.TUG, maxTensionDrop: 2 },\n      { circuitType: CircuitType.IUE, maxTensionDrop: 2 },\n      { circuitType: CircuitType.TUE, maxTensionDrop: 2 },\n\n    ] as TensionDrop[];\n  }\n\n  validateNominalSection(\n    technicalFeatures: TechnicalFeature[],\n    circuit: Circuit,\n    nominalSection: number,\n    powerLoad: number,\n    tryLAP: boolean) : number {\n\n    let nominalSectionCalculated = nominalSection;\n    // if LAP try with the immediately preceding nominal section\n    if(tryLAP && circuit.circuitType == CircuitType.LAP){\n      const index = technicalFeatures.findIndex(item => item.nominalSection == nominalSectionCalculated);\n\n      if (index > 0) {\n        return this.validateNominalSection(\n          technicalFeatures,\n          circuit,\n          technicalFeatures[index - 1].nominalSection,\n          powerLoad,\n          false); // No hay sección anterior\n      }\n\n    }\n\n    let tensionDropCalculated = this.calcuteTensionDrop(circuit, nominalSection, powerLoad);\n    let tensionDropConfiguration = this.tensionDrops().find(td => td.circuitType == circuit.circuitType);\n\n    if (tensionDropCalculated >= tensionDropConfiguration.maxTensionDrop) {\n      let technicalFeaturesFiltered = technicalFeatures.filter(feature => feature.nominalSection > nominalSection);\n      let technicalFeature = technicalFeaturesFiltered[0];\n      return this.validateNominalSection(technicalFeaturesFiltered, circuit, technicalFeature.nominalSection, powerLoad, false);\n    }\n    return nominalSection;\n  }\n\n  calcuteTensionDrop(circuit: Circuit, nominalSection: number, powerLoad: number) : number {\n    let constant = 200;\n    let length = circuit.length;\n    let workTension = Math.pow(220, 2);\n    let σ = 47.5;\n    return parseFloat(((constant * powerLoad * length) / (workTension * σ * nominalSection)).toFixed(2));\n  }\n\n  sectionNominals(): SectionNominal[]{\n    return [\n      { circuitType: CircuitType.LAP, minSectionNominal: 4.0 },\n      { circuitType: CircuitType.IUG, minSectionNominal: 1.5 },\n      { circuitType: CircuitType.TUG, minSectionNominal: 2.5 },\n      { circuitType: CircuitType.IUE, minSectionNominal: 2.5 },\n      { circuitType: CircuitType.TUE, minSectionNominal: 2.5 },\n\n    ] as SectionNominal[];\n  }\n\n  calculateProtection(current: number, isLAP: boolean = false) : Protection {\n    // 1.- ib < i1\n    // 2.- in <= iz\n    let Ib = current;\n    let In = isLAP ? this.protections().find(p => Ib <= p.protectionValue) : this.protections().find(p => Ib < p.protectionValue);\n    return In;\n  }\n\n  validateProtection(nominalSectionCalculated: number, current: number) : Protection {\n    // 1.- ib < i1\n    // 2.- in <= iz\n    let Ib = current;\n    let Iz = this.tecnicalFeatures().find( tf => tf.nominalSection == nominalSectionCalculated).allowableCurrentIntensityInPipes;\n    let In = this.protections().find(p => p.protectionValue <= Ib);\n    let I1 = 1.13 * In.protectionValue;\n    return In;\n  }\n\n  protections(): Protection[] {\n    return [\n      { protectionType: ProtectionType.C05, protectionValue: 0.5 },\n      { protectionType: ProtectionType.C1, protectionValue: 1 },\n      { protectionType: ProtectionType.C2, protectionValue: 2 },\n      { protectionType: ProtectionType.C3, protectionValue: 3 },\n      { protectionType: ProtectionType.C4, protectionValue: 4 },\n      { protectionType: ProtectionType.C6, protectionValue: 6 },\n      { protectionType: ProtectionType.C10, protectionValue: 10 },\n      { protectionType: ProtectionType.C16, protectionValue: 16 },\n      { protectionType: ProtectionType.C20, protectionValue: 20 },\n      { protectionType: ProtectionType.C25, protectionValue: 25 },\n      { protectionType: ProtectionType.C32, protectionValue: 32 },\n      { protectionType: ProtectionType.C40, protectionValue: 40 },\n      { protectionType: ProtectionType.C50, protectionValue: 50 },\n      { protectionType: ProtectionType.C63, protectionValue: 63 },\n    ];\n  }\n}\n\ninterface ArtifactResult {\n  summerDayConsumptionDetermined: number;\n  summerNightConsumptionDetermined: number;\n  winterDayConsumptionDetermined: number;\n  winterNightConsumptionDetermined: number;\n}\n\nexport interface TechnicalFeature {\n  nominalSection: number;\n  allowableCurrentIntensityInPipes: number;\n}\n\nexport interface TensionDrop {\n  circuitType: CircuitType;\n  maxTensionDrop: number;\n}\n\nexport interface SectionNominal {\n  circuitType: CircuitType;\n  minSectionNominal: number;\n}\n\nexport interface Protection {\n  protectionType: ProtectionType;\n  protectionValue: number;\n}\n\nexport enum ProtectionType {\n  C05 = 'C05',\n  C1 = 'C1',\n  C2 = 'C2',\n  C3 = 'C3',\n  C4 = 'C4',\n  C6 = 'C6',\n  C10 = 'C10',\n  C16 = 'C16',\n  C20 = 'C20',\n  C25 = 'C25',\n  C32 = 'C32',\n  C40 = 'C40',\n  C50 = 'C50',\n  C63 = 'C63',\n}\n\n\n\n\n","import { Injectable } from '@angular/core';\nimport { Project } from '../models/project.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectsService {\n  private key = 'projects';\n\n  saveProject(project: Project) {\n    let projects = this.getProjects();\n    project.id = projects.length + 1;\n    projects = projects.filter(p => p.id != project.id);\n    projects.push(project);\n    localStorage.setItem(this.key, JSON.stringify(projects));\n  }\n\n  updateProject(id: number, updatedProject: Project) {\n    let projects = this.getProjects();\n    const index = projects.findIndex((project) => project.id == id);\n    if (index > -1) {\n      projects[index] = updatedProject;\n      localStorage.setItem(this.key, JSON.stringify(projects));\n    }\n  }\n\n  deleteProject(id: number) {\n    let projects = this.getProjects();\n    const projectsFiltered = projects.filter((project) => project.id != id);\n    if(projectsFiltered){\n      localStorage.setItem(this.key, JSON.stringify(projectsFiltered));\n    }\n  }\n\n  getProject(): Project | null {\n    const projects = this.getProjects();\n    return projects.length > 0 ? projects[0] : null; // Return the first project for simplicity\n  }\n\n  getProjects(): Project[] {\n    const projects = localStorage.getItem(this.key);\n    return projects ? JSON.parse(projects) : [];\n  }\n\n  getProjectById(id: number): Project | undefined {\n    const projects = localStorage.getItem(this.key);\n    return projects ? JSON.parse(projects)?.find((project) => project.id == id) : undefined;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ProjectsService } from './projects.service';\nimport { Surface } from '../models/surface.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SurfacesService {\n\n  constructor(\n    private projectsService: ProjectsService,\n  ) { }\n\n  saveSurface(projectId: number, surface: Surface) {\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectId);\n    if(index != -1){\n      let project = projects[index];\n\n      if(!project.surfaces)\n        project.surfaces = [];\n\n      project.surfaces.push(surface);\n      this.projectsService.updateProject(projectId, project);\n    }\n  }\n\n  updateSurface(projectid: number, updatedSurface: Surface){\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectid);\n    if(index != -1){\n      let surfaces = projects[index]?.surfaces;\n      if(surfaces){\n        let indexSurface = surfaces.findIndex(s => s.environment == updatedSurface.environment);\n        if(indexSurface != -1){\n          surfaces[indexSurface] = updatedSurface;\n          projects[index].surfaces = surfaces;\n          this.projectsService.updateProject(projectid, projects[index]);\n        }\n      }\n    }\n  }\n\n  deleteSurface(projectId: number, environment: string) {\n    let projects = this.projectsService.getProjects();\n    let index = projects.findIndex(p => p.id == projectId);\n    if(index != -1){\n      let project = projects[index];\n      project.surfaces = project.surfaces.filter(s => s.environment != environment);\n      this.projectsService.updateProject(projectId, project);\n    }\n  }\n\n  getSurface(projectId: number, environment: string): Surface | null {\n    const project = this.projectsService.getProjectById(projectId);\n    return project?.surfaces ? project?.surfaces.find((surface) => surface.environment == environment) : null;\n  }\n\n  getSurfaces(projectId: number): Surface[] {\n    const project = this.projectsService.getProjectById(projectId);\n    return project?.surfaces || [];\n  }\n\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Surface } from '../models/surface.model';\nimport { SurfacesService } from 'app/pages/projects/services/surfaces.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { SurfaceType } from '../models/surfacetype.model';\nimport { ProjectsCalculatorService } from '../services/projects-calculator.service';\nimport { ElectrificationDegreeType } from '../models/electrification-degree-type.model';\nimport { CircuitType } from '../models/circuittype.model';\n\n@Component({\n  selector: 'surfaces',\n  templateUrl: './surfaces.component.html',\n  styleUrls: ['./surfaces.component.scss'],\n})\nexport class SurfacesComponent implements OnInit {\n  projectId: number;\n  surfaceForm: FormGroup;\n  surfaces: Surface[];\n  selectedSurface: Surface;\n  isEdit: boolean;\n\n  constructor(\n    private surfacesService: SurfacesService,\n    private fb: FormBuilder,\n    private activatedRoute: ActivatedRoute,\n    private projectCalcultatorService: ProjectsCalculatorService,\n  ) { }\n\n  ngOnInit(): void {\n    this.surfaceForm = this.fb.group({\n      type: ['', Validators.required],\n      environment: ['', Validators.required],\n      width: ['', Validators.required],\n      length: ['', Validators.required],\n    });\n\n    this.projectId = parseInt(this.activatedRoute.snapshot.params['projectId']);\n    this.surfaces = this.surfacesService.getSurfaces(parseInt(this.activatedRoute.snapshot.params['projectId']));\n    this.isEdit = false;\n  }\n\n  saveSurface() {\n    if(!this.surfaceForm.invalid){\n      if(!this.isEdit){\n        let newSurface = this.surfaceForm.value as Surface;\n        newSurface.artifacts = [];\n        this.surfacesService.saveSurface(this.projectId, newSurface);\n      } else {\n        let surfaceToUpdate = this.surfaceForm.value as Surface;\n        this.selectedSurface.type = surfaceToUpdate.type;\n        this.selectedSurface.environment = surfaceToUpdate.environment;\n        this.selectedSurface.width = surfaceToUpdate.width;\n        this.selectedSurface.length = surfaceToUpdate.length;\n        this.surfacesService.updateSurface(this.projectId, this.selectedSurface);\n      }\n      this.cleanForm();\n    } else {\n      alert('the form is invalid');\n    }\n  }\n\n  cleanForm(): void {\n    this.isEdit = false;\n    this.surfaceForm.controls['type'].setValue('');\n    this.surfaceForm.controls['environment'].setValue('');\n    this.surfaceForm.controls['width'].setValue('');\n    this.surfaceForm.controls['length'].setValue('');\n    this.surfaces = this.surfacesService.getSurfaces(this.projectId);\n  }\n\n  editSurface(environment: string) {\n    this.selectedSurface = this.surfacesService.getSurface(this.projectId, environment);\n    this.surfaceForm.patchValue(this.selectedSurface);\n    this.isEdit = true;\n  }\n\n  deleteSurface(environment: string){\n    this.surfacesService.deleteSurface(this.projectId, environment);\n    this.cleanForm();\n  }\n\n  isFormInvalid() : boolean {\n    return this.surfaceForm.controls['type'].hasError('required')\n    || this.surfaceForm.controls['environment'].hasError('required')\n    || this.surfaceForm.controls['width'].hasError('required')\n    || this.surfaceForm.controls['length'].hasError('required');\n  }\n\n  coveredSurfaces() : Surface[]{\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return surfaces.filter(surface => surface.type == SurfaceType.Covered);\n  }\n\n  semiCoveredSurfaces() : Surface[]{\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return surfaces.filter(surface => surface.type == SurfaceType.SemiCovered);\n  }\n\n  totalSurfaceCovered() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.totalSurfaceCovered(surfaces);\n  }\n\n  totalSurfaceSemiCovered() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.totalSurfaceSemiCovered(surfaces);\n  }\n\n  totalSurface() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.totalSurface(surfaces);\n  }\n\n  calculateMaximumConsumptionDetermined(): number{\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.calculateMaximumConsumptionDetermined(surfaces);\n  }\n\n  apparentPower() : number {\n    let surfaces = this.surfacesService.getSurfaces(this.projectId);\n    return this.projectCalcultatorService.apparentPower(surfaces);\n  }\n\n  electrificationDegree() : ElectrificationDegreeType {\n    return this.projectCalcultatorService.electrificationDegree(this.totalSurface(), this.apparentPower());\n  }\n\n  isMinimalElectrificationDegree() : boolean {\n    return this.electrificationDegree() == ElectrificationDegreeType.Minimal;\n  }\n\n  isMediumElectrificationDegree() : boolean {\n    return this.electrificationDegree() == ElectrificationDegreeType.Medium;\n  }\n\n  isHighElectrificationDegree() : boolean {\n    return this.electrificationDegree() == ElectrificationDegreeType.High;\n  }\n\n  isUpperElectrificationDegree() : boolean {\n    return this.electrificationDegree() == ElectrificationDegreeType.Upper;\n  }\n\n  circuits() : CircuitType[]{\n    let electrificationDegree = this.electrificationDegree();\n    return this.projectCalcultatorService.circuitsByelectrificationDegree(electrificationDegree);\n  }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\">\n      <nb-card-header>Surface <a nbButton outline status=\"info\" [routerLink]=\"'../../../projects'\">Back to Proyects</a></nb-card-header>\n      <nb-card-body>\n        <form [formGroup]=\"surfaceForm\" class=\"form-inline\">\n          <nb-select placeholder=\"Choose a surface type\" formControlName=\"type\">\n            <nb-option value=\"0\">Covered</nb-option>\n            <nb-option value=\"1\">Semi-Covered</nb-option>\n          </nb-select>\n          <input nbInput formControlName=\"environment\" type=\"text\" placeholder=\"Environment\" maxlength=\"100\" />\n          <input nbInput formControlName=\"width\" type=\"number\" placeholder=\"Width [m]\" />\n          <input nbInput formControlName=\"length\" type=\"number\" placeholder=\"Length [m]\" />\n          <button\n            outline\n            [disabled]=\"isFormInvalid()\"\n            nbButton\n            status=\"primary\"\n            (click)=\"saveSurface()\">{{ !isEdit ? 'Save Surface' : 'Update Surface' }}</button>\n\n            <button *ngIf=\"isEdit\" outline nbButton status=\"danger\" (click)=\"cleanForm()\">Cancel</button>\n        </form>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"coveredSurfaces()?.length > 0\">\n      <nb-card-header>Surfaces Covered</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li *ngFor=\"let surface of coveredSurfaces()\" class=\"form-inline\">\n            <input nbInput disabled type=\"text\" placeholder=\"Environment\" [value]=\"surface.environment\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Width [m]\" [value]=\"surface.width\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Length [m]\" [value]=\"surface.length\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Surface [m2]\" [value]=\"(surface.width * surface.length).toFixed(2)\" />\n            <button nbButton outline (click)=\"editSurface(surface.environment)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteSurface(surface.environment)\" status=\"danger\">Delete</button>\n            <a nbButton outline status=\"info\" [routerLink]=\"'../../artifacts/' + projectId + '/' + surface.environment\">Artifacts</a>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" class=\"inline-form-card\" *ngIf=\"semiCoveredSurfaces()?.length > 0\">\n      <nb-card-header>Surfaces Semi Covered</nb-card-header>\n      <nb-card-body>\n        <ul>\n          <li *ngFor=\"let surface of semiCoveredSurfaces()\" class=\"form-inline\">\n            <input nbInput disabled type=\"text\" placeholder=\"Environment\" [value]=\"surface.environment\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Width\" [value]=\"surface.width\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Length\" [value]=\"surface.length\" />\n            <input nbInput disabled type=\"number\" placeholder=\"Surface [m2]\" [value]=\"(surface.width * surface.length).toFixed(2)\" />\n            <button nbButton outline (click)=\"editSurface(surface.environment)\" status=\"primary\">Edit</button>\n            <button nbButton outline (click)=\"deleteSurface(surface.environment)\" status=\"danger\">Delete</button>\n            <a nbButton outline status=\"info\" [routerLink]=\"'../../artifacts/' + projectId + '/' + surface.environment\">Artifacts</a>\n          </li>\n        </ul>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <nb-card accent=\"info\" *ngIf=\"surfaces?.length > 0\">\n      <nb-card-header>Totals</nb-card-header>\n      <nb-card-body>\n        <div class=\"form-group row form-horizontal\">\n          <div class=\"col-md-5\">\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span>Covered Surface: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Surface Covered [m2]\" [value]=\"totalSurfaceCovered()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Semi Covered Surface: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Surface Semi Covered [m2]\" [value]=\"totalSurfaceSemiCovered()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Semi Covered Surface 50%: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Surface Semi Covered %50 [m2]\" [value]=\"totalSurfaceSemiCovered() / 2\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Total Surface [m2]: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Surface [m2]\" [value]=\"totalSurface()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Maximum Consumption Determined [W]: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Maximum Consumption Determined [W]\" [value]=\"calculateMaximumConsumptionDetermined()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Apparent Power [KVA]: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"number\" placeholder=\"Apparent Power [KVA]\" [value]=\"apparentPower()\" />\n              </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-5\">\n                <span class=\"text\">Degree of electrification: </span>\n              </div>\n              <div class=\"col-md-7\">\n                <input nbInput disabled type=\"text\" placeholder=\"Apparent Power [KVA]\" [value]=\"electrificationDegree()\" />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"col-md-7\">\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <nb-card accent=\"danger\">\n                  <nb-card-header>Degrees of electrification</nb-card-header>\n                  <nb-card-body>\n                    <table>\n                      <thead>\n                        <tr>\n                          <th style=\"width: 20%;\">Degree of electrification</th>\n                          <th style=\"width: 40%;\">Surface (Application limit)</th>\n                          <th style=\"width: 60%;\">Calculated maximum simultaneous power demand\n                            (only to determine the degree of electrification)</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr [style]=\"isMinimalElectrificationDegree() ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                          <td>\n                            Minimal\n                          </td>\n                          <td>\n                            <= 60 m2\n                          </td>\n                          <td>\n                            <= 3,7 kVA\n                          </td>\n                        </tr>\n                        <tr [style]=\"isMediumElectrificationDegree() ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                          <td>\n                            Medium\n                          </td>\n                          <td>\n                            > 60 m2 && <= 130 m2\n                          </td>\n                          <td>\n                            <= 7 kVA\n                          </td>\n                        </tr>\n                        <tr [style]=\"isHighElectrificationDegree() ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                          <td>\n                            High\n                          </td>\n                          <td>\n                            > 130 m2 && <= 200 m2\n                          </td>\n                          <td>\n                            <= 11 kVA\n                          </td>\n                        </tr>\n                        <tr [style]=\"isUpperElectrificationDegree() ? 'color: #00d68f; border-color: #00d68f; background-color: rgba(0, 214, 143, 0.08)' : ''\">\n                          <td>\n                            Upper\n                          </td>\n                          <td>\n                            > 200 m2\n                          </td>\n                          <td>\n                            > 11 kVA\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </nb-card-body>\n                </nb-card>\n              </div>\n            </div>\n\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <nb-card accent=\"danger\">\n                  <nb-card-header>\n                    Minimal circuits according to degree of electrification\n                    <span *ngIf=\"surfaces?.length > 0\">\n                      <a nbButton outline status=\"success\" [routerLink]=\"'../../circuits/' + projectId\">Circuits</a>\n                    </span>\n                  </nb-card-header>\n                  <nb-card-body class=\"form-inline\">\n                    <div class=\"row inline-form-card\" *ngFor=\"let circuit of circuits()\">\n                      <div class=\"col-md-2\">\n                        <input nbInput disabled type=\"text\" [placeholder]=\"circuit\" [value]=\"circuit\" />\n                      </div>\n                    </div>\n                  </nb-card-body>\n                </nb-card>\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </nb-card-body>\n    </nb-card>\n  </div>\n</div>\n"],"sourceRoot":"webpack:///"}